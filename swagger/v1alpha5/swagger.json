{
  "swagger": "2.0",
  "info": {
    "description": "The API Gateway exposes all publicly available API endpoints for Crusoe Cloud products.",
    "title": "Crusoe Cloud API Gateway",
    "version": "v1alpha5"
  },
  "host": "api.crusoecloud.com",
  "basePath": "/v1alpha5",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/capacities": {
      "get": {
        "tags": [
          "Capacities"
        ],
        "summary": "Lists available Crusoe Cloud capacity with optional filters on location and product name.",
        "operationId": "listSliceCapacities",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "[a100.1x, a100.2x]",
            "x-go-name": "ProductNames",
            "name": "product_name",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "[us-northcentral1-a, us-northcentral1-b]",
            "x-go-name": "Locations",
            "name": "location",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/capacitiesResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/compute/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Lists all VM images available for use.",
        "operationId": "listImages",
        "responses": {
          "200": {
            "$ref": "#/responses/listImagesResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/compute/images/{image_id}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Retrieve details about a VM image.",
        "operationId": "getImage",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ImageID",
            "name": "image_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getImageResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/featureflags": {
      "get": {
        "description": "A successful response from this resource will contain a map of\nall feature flags and the value assigned to each of them for the user.",
        "tags": [
          "Feature-Flags"
        ],
        "summary": "Get feature flags for the currently logged in user.",
        "operationId": "getFeatureFlags",
        "responses": {
          "200": {
            "$ref": "#/responses/featureFlagsGetResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Lists all Crusoe Cloud locations usable for resource hosting.",
        "operationId": "listLocations",
        "responses": {
          "200": {
            "$ref": "#/responses/locationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Retrieve details about all active organizations the logged in user belongs to.",
        "operationId": "getOrganizations",
        "responses": {
          "200": {
            "$ref": "#/responses/organizationsGetResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "put": {
        "description": "A successful response from this resource will contain the updated organization details.",
        "tags": [
          "Entities"
        ],
        "summary": "Update details for an organization that the logged in user owns.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OrgID",
            "name": "org_id",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntitiesPutPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/organizationsPutPostResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/projects": {
      "get": {
        "description": "If querying for projects within an organization, the logged in user must be the owner of the organization.",
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve details about projects that the logged in user belongs to or owns.",
        "operationId": "listProjects",
        "parameters": [
          {
            "type": "string",
            "example": "ee2a6bc3-aed5-4756-8995-9990a53d3a17",
            "x-go-name": "OrgID",
            "name": "org_id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "default",
            "x-go-name": "ProjectName",
            "name": "project_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listProjectsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "put": {
        "description": "Requests to this resource must contain the json-encoded representation of the changes they want to make to the project.\nCurrently only the project's name can be changed.",
        "tags": [
          "Projects"
        ],
        "summary": "Update details for a project that the logged in user owns.",
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "example": "f058d0db-2fa4-4cf2-8cf1-dfbcfe05a814",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectsPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/projectsPutPostResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "The logged in user must have the permission to create projects within the organization.\nA successful response from this resource contains details of the created project.",
        "tags": [
          "Projects"
        ],
        "summary": "Create a new project that will be owned by the logged in user.",
        "operationId": "createProject",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectsPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/projectsPutPostResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/projects/{project_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve details about a project that the logged in user belongs to or owns.",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "string",
            "example": "ee2a6bc3-aed5-4756-8995-9990a53d3a17",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getProjectResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "description": "Delete operations cascade to VMs created under that project.",
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project that the logged in user owns.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/{organization_id}/audit-logs": {
      "get": {
        "tags": [
          "Audit",
          "Logs"
        ],
        "summary": "Get audit logs belonging to the specified organization. User must be part of the organization.",
        "operationId": "getAuditLogs",
        "parameters": [
          {
            "type": "string",
            "example": "de8f27fe-8438-45e7-a2c2-a2767660625f",
            "x-go-name": "OrganizationID",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "f934fbdb-7e3a-4b92-b7d2-da0f91d768e8,8c29f3f3-830f-4a44-9b6b-a51fcf6a6b5d",
            "x-go-name": "ProjectIDs",
            "name": "project_ids",
            "in": "query"
          },
          {
            "type": "string",
            "example": "2022-09-01T14:25:36-07:00",
            "x-go-name": "StartTime",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "string",
            "example": "2022-09-06T14:25:36-07:00",
            "x-go-name": "EndTime",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "string",
            "example": "Create,Update",
            "x-go-name": "Actions",
            "name": "actions",
            "in": "query"
          },
          {
            "type": "string",
            "example": "f934fbdb-7e3a-4b92-b7d2-da0f91d768e8,8c29f3f3-830f-4a44-9b6b-a51fcf6a6b5d",
            "x-go-name": "ActorIDs",
            "name": "actor_ids",
            "in": "query"
          },
          {
            "type": "string",
            "example": "hh26@xxx.com,xyz@yyy.ai, only support filter by user email, not by crusoe admin email. ",
            "x-go-name": "ActorEmails",
            "name": "actor_emails",
            "in": "query"
          },
          {
            "type": "string",
            "example": "User,Crusoe Admin, please ensure URL encoding for values with space.",
            "x-go-name": "ActorTypes",
            "name": "actor_types",
            "in": "query"
          },
          {
            "type": "string",
            "example": "f934fbdb-7e3a-4b92-b7d2-da0f91d768e8,8c29f3f3-830f-4a44-9b6b-a51fcf6a6b5d",
            "x-go-name": "TargetIDs",
            "name": "target_ids",
            "in": "query"
          },
          {
            "type": "string",
            "example": "VM,KubernetesCluster",
            "x-go-name": "TargetTypes",
            "name": "target_types",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my_vm1,my_vm2",
            "x-go-name": "TargetNames",
            "name": "target_names",
            "in": "query"
          },
          {
            "type": "string",
            "example": "f934fbdb-7e3a-4b92-b7d2-da0f91d768e8,8c29f3f3-830f-4a44-9b6b-a51fcf6a6b5d",
            "x-go-name": "AssociateIDs",
            "name": "associate_ids",
            "in": "query"
          },
          {
            "type": "string",
            "example": "VM,KubernetesCluster",
            "x-go-name": "AssociateTypes",
            "name": "associate_types",
            "in": "query"
          },
          {
            "type": "string",
            "example": "instance",
            "x-go-name": "AssociateNames",
            "name": "associate_names",
            "in": "query"
          },
          {
            "type": "string",
            "example": "us-east1,us-northcentral1-a",
            "x-go-name": "Locations",
            "name": "locations",
            "in": "query"
          },
          {
            "type": "string",
            "example": "OK,Bad Request",
            "x-go-name": "Statuses",
            "name": "statuses",
            "in": "query"
          },
          {
            "type": "string",
            "example": "Browser,Crusoe Terraform/v0.5.21 please make sure the values are URL encoded.",
            "x-go-name": "Surfaces",
            "name": "surfaces",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/auditLogsResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/{organization_id}/reservations": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get all reservations belonging to the specified organization. User must be part of the organization.",
        "operationId": "getReservations",
        "parameters": [
          {
            "type": "string",
            "example": "de8f27fe-8438-45e7-a2c2-a2767660625f",
            "x-go-name": "OrganizationID",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "effective",
            "x-go-name": "Status",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/reservationsResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/{organization_id}/reservations/{reservation_id}": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get reservation belonging to the specified organization and reservation ID. User must be part of the organization.",
        "operationId": "getReservation",
        "parameters": [
          {
            "type": "string",
            "example": "de8f27fe-8438-45e7-a2c2-a2767660625f",
            "x-go-name": "OrganizationID",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "de8f27fe-8438-45e7-a2c2-a2767660625f",
            "x-go-name": "ReservationID",
            "name": "reservation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/reservationsResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/{organization_id}/usage": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Get project-level usage for products in Crusoe Cloud.",
        "operationId": "getUsage",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OrgID",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "d8f58dfd-dd86-4ee4-8f01-643e6d0f15bb"
            ],
            "x-go-name": "Projects",
            "name": "projects",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "persistent-ssd",
              "a40.1x"
            ],
            "x-go-name": "ResourceTypes",
            "name": "resource_types",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "us-east1",
              "us-northcentral1"
            ],
            "x-go-name": "Regions",
            "name": "regions",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "example": "\"2022-07-01\"",
            "x-go-name": "StartDate",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "example": "\"2023-08-08\"",
            "x-go-name": "EndDate",
            "name": "end_date",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/usageGetResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/{organization_id}/usage/export": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "tags": [
          "Usage"
        ],
        "summary": "Get resource-level usage for products in Crusoe Cloud.",
        "operationId": "getUsageExport",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OrgID",
            "name": "organization_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "d8f58dfd-dd86-4ee4-8f01-643e6d0f15bb"
            ],
            "x-go-name": "Projects",
            "name": "projects",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "d8f58dfd-dd86-4ee4-8f01-643e6d0f15bb"
            ],
            "x-go-name": "Resources",
            "name": "resources",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "persistent-ssd",
              "a40.1x"
            ],
            "x-go-name": "ResourceTypes",
            "name": "resource_types",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "us-east1",
              "us-northcentral1"
            ],
            "x-go-name": "Regions",
            "name": "regions",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "example": "\"2022-07-01\"",
            "x-go-name": "StartDate",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "example": "\"2023-08-08\"",
            "x-go-name": "EndDate",
            "name": "end_date",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/usageExportGetResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/organizations/{organization_id}/usage/options": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Get options which exist for filters for /usage and /usage/export routes.",
        "operationId": "getUsageOptions",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OrgID",
            "name": "organization_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/usageOptionsGetResponse"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/custom-images": {
      "get": {
        "tags": [
          "CustomImages"
        ],
        "summary": "List all custom VM images available for use.",
        "operationId": "listCustomImages",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listImagesResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "tags": [
          "CustomImages"
        ],
        "summary": "Create a custom image.",
        "operationId": "customImagePost",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomImagePostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/custom-images/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe custom images resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "Custom-Image-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listCustomImagesOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/custom-images/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe custom image resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Custom-Image-Operations"
        ],
        "summary": "Get status of a single asynchronous custom image operation",
        "operationId": "getCustomImagesOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/custom-images/{image_id}": {
      "get": {
        "tags": [
          "CustomImages"
        ],
        "summary": "Retrieve details about a VM image.",
        "operationId": "getCustomImage",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ImageID",
            "name": "image_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getImageResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "CustomImages"
        ],
        "summary": "Delete a custom image.",
        "operationId": "customImageDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ImageID",
            "name": "image_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "tags": [
          "CustomImages"
        ],
        "summary": "Update a custom image.",
        "operationId": "customImagePatch",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ImageID",
            "name": "image_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomImagePatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customImagePatchResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/instance-groups": {
      "get": {
        "tags": [
          "Instance-Groups"
        ],
        "summary": "Lists all instance groups.",
        "operationId": "listInstanceGroups",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listInstanceGroupsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "tags": [
          "Instance-Groups"
        ],
        "summary": "Create an instance group.",
        "operationId": "createInstanceGroup",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstanceGroupPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createInstanceGroupResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/instance-groups/{instance_group_id}": {
      "get": {
        "tags": [
          "Instance-Groups"
        ],
        "summary": "Retrieve details about an instance group.",
        "operationId": "getInstanceGroup",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "InstanceGroupID",
            "name": "instance_group_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getInstanceGroupResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "Instance-Groups"
        ],
        "summary": "Delete an instance group.",
        "operationId": "deleteInstanceGroup",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "InstanceGroupID",
            "name": "instance_group_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "tags": [
          "Instance-Groups"
        ],
        "summary": "Update an instance group.",
        "operationId": "patchInstanceGroup",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "InstanceGroupID",
            "name": "instance_group_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstanceGroupPatchRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/patchInstanceGroupResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/instance-templates": {
      "get": {
        "tags": [
          "Instance-Templates"
        ],
        "summary": "Lists all VM instance templates available for use.",
        "operationId": "listInstanceTemplates",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listInstanceTemplatesResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "tags": [
          "Instance-Templates"
        ],
        "summary": "Create a VM instance template, for use in bulk VM creation.",
        "operationId": "createInstanceTemplate",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstanceTemplatePostRequestV1Alpha5"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createInstanceTemplateResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/instance-templates/{instance_template_id}": {
      "get": {
        "tags": [
          "Instance-Templates"
        ],
        "summary": "Retrieve details about a VM instance template.",
        "operationId": "getInstanceTemplate",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "InstanceTemplateID",
            "name": "instance_template_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getInstanceTemplateResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "Instance-Templates"
        ],
        "summary": "Delete a VM instance template.",
        "operationId": "deleteInstanceTemplate",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "InstanceTemplateID",
            "name": "instance_template_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/bulk-instances": {
      "post": {
        "tags": [
          "VMs"
        ],
        "summary": "Create new VM instances owned by the logged in user.",
        "operationId": "bulkCreateInstance",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkInstancePostRequestV1Alpha5"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/instances": {
      "get": {
        "tags": [
          "VMs"
        ],
        "summary": "Retrieve details about all VMs that the logged in user owns or has access to.",
        "operationId": "listInstances",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "IDs",
            "name": "ids",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-first-vm",
            "x-go-name": "Names",
            "name": "names",
            "in": "query"
          },
          {
            "type": "string",
            "example": "a40.2x,a100.8x",
            "x-go-name": "Types",
            "name": "types",
            "in": "query"
          },
          {
            "type": "string",
            "example": "us-east1,us-northcentral1",
            "x-go-name": "Locations",
            "name": "locations",
            "in": "query"
          },
          {
            "type": "string",
            "example": "STATE_RUNNING",
            "x-go-name": "States",
            "name": "states",
            "in": "query"
          },
          {
            "type": "string",
            "example": "20",
            "x-go-name": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "example": "name",
            "x-go-name": "Sort",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "string",
            "example": "bXktZmlyc3Qtdm0",
            "x-go-name": "NextToken",
            "name": "next_token",
            "in": "query"
          },
          {
            "type": "string",
            "example": "bXktZmlyc3Qtdm0",
            "x-go-name": "PrevToken",
            "name": "prev_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listInstancesResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "tags": [
          "VMs"
        ],
        "summary": "Create a new VM instance owned by the logged in user.",
        "operationId": "createInstance",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstancesPostRequestV1Alpha5"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/instances/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe instances resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "VM-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listComputeVMsInstancesOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "2021-12-03T19:58:34Z",
            "x-go-name": "LowerTimeBound",
            "name": "lower_time_bound",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/instances/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe instances resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "VM-Operations"
        ],
        "summary": "Get the status of a single asynchronous operation",
        "operationId": "getComputeVMsInstancesOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/instances/{vm_id}": {
      "get": {
        "tags": [
          "VMs"
        ],
        "summary": "Retrieve details about a particular VM.",
        "operationId": "getInstance",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VMID",
            "name": "vm_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getInstanceResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "VMs"
        ],
        "summary": "Delete a VM that the logged in user owns.",
        "operationId": "deleteInstance",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VMID",
            "name": "vm_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "tags": [
          "VMs"
        ],
        "summary": "Change the state of a VM the logged in user owns.",
        "operationId": "updateInstance",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstancesPatchRequestV1Alpha5"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VMID",
            "name": "vm_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/instances/{vm_id}/attach-disks": {
      "post": {
        "tags": [
          "VMs"
        ],
        "summary": "Attach disks to a VM the logged in user owns.",
        "operationId": "updateInstanceAttachDisks",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstancesAttachDiskPostRequestV1Alpha5"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VMID",
            "name": "vm_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/instances/{vm_id}/detach-disks": {
      "post": {
        "tags": [
          "VMs"
        ],
        "summary": "Detach disks from a VM the logged in user owns.",
        "operationId": "updateInstanceDetachDisks",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstancesDetachDiskPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VMID",
            "name": "vm_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/compute/vms/types": {
      "get": {
        "tags": [
          "VMs"
        ],
        "summary": "Retrieve information about the types of VMs that are available.",
        "operationId": "getVMTypes",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/typesGetResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/clusters": {
      "get": {
        "tags": [
          "Kubernetes-Clusters"
        ],
        "summary": "Retrieve information about Kubernetes clusters belonged to the project.",
        "operationId": "listClusters",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listKubernetesClustersResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Kubernetes-Clusters"
        ],
        "summary": "Create a new Kubernetes cluster owned by the logged in user.",
        "operationId": "createCluster",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesClusterPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/clusters/operations": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe Kubernetes Cluster resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Kubernetes-Cluster-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listKubernetesClustersOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/clusters/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe Kubernetes Cluster resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Kubernetes-Cluster-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getKubernetesClustersOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/clusters/{cluster_id}": {
      "get": {
        "tags": [
          "Kubernetes-Clusters"
        ],
        "summary": "Retrieve information about a particular Kubernetes cluster belonged to the project.",
        "operationId": "getCluster",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getKubernetesClusterResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "Kubernetes-Clusters"
        ],
        "summary": "Delete a cluster that the logged in user owns.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "tags": [
          "Kubernetes-Clusters"
        ],
        "summary": "Update a cluster that the logged in user owns.",
        "operationId": "updateCluster",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesClusterPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/clusters/{cluster_id}/get-credentials": {
      "post": {
        "tags": [
          "Kubernetes-Clusters"
        ],
        "summary": "Retrieve credentials for the user to authenticate to the specified cluster.",
        "operationId": "getClusterCredentials",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getKubernetesClusterCredentialsResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/nodepools": {
      "get": {
        "tags": [
          "Kubernetes-NodePools"
        ],
        "summary": "Retrieve information about Kubernetes node pools belonging to a project or cluster.",
        "operationId": "listNodePools",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listKubernetesNodePoolsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Kubernetes-NodePools"
        ],
        "summary": "Create a new Kubernetes node pool owned by the logged in user.",
        "operationId": "createNodePool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesNodePoolPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/nodepools/operations": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe Kubernetes Node Pool resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Kubernetes-Node-Pool-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listKubernetesNodePoolsOperations",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/nodepools/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe Kubernetes Node Pool resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Kubernetes-Node-Pool-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getKubernetesNodePoolsOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/kubernetes/nodepools/{node_pool_id}": {
      "get": {
        "tags": [
          "Kubernetes-NodePools"
        ],
        "summary": "Retrieve information about a particular Kubernetes node pool belonging to the project.",
        "operationId": "getNodePool",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "NodePoolID",
            "name": "node_pool_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getKubernetesNodePoolResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "Kubernetes-NodePools"
        ],
        "summary": "Delete a node pool that the logged in user owns.",
        "operationId": "deleteNodePool",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "NodePoolID",
            "name": "node_pool_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "tags": [
          "Kubernetes-NodePools"
        ],
        "summary": "Update a node pool that the logged in user owns.",
        "operationId": "updateNodePool",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "NodePoolID",
            "name": "node_pool_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesNodePoolPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/mtc/clusters": {
      "get": {
        "tags": [
          "Training-Clusters"
        ],
        "summary": "Retrieve information about training clusters belonged to the project.",
        "operationId": "listTrainingClusters",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "my-slurm-cluster",
            "x-go-name": "Name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listTrainingClustersResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Training-Clusters"
        ],
        "summary": "Create a new training cluster owned by the logged in user.",
        "operationId": "createTrainingCluster",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTCClusterPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/mtc/clusters/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe Training Cluster resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Training-Cluster-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getTrainingClustersOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/mtc/clusters/{cluster_id}": {
      "get": {
        "tags": [
          "Training-Clusters"
        ],
        "summary": "Retrieve information about a particular training cluster belonged to the project.",
        "operationId": "getTrainingCluster",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getTrainingClusterResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "Training-Clusters"
        ],
        "summary": "Delete a training cluster that the logged in user owns.",
        "operationId": "deleteTrainingCluster",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/mtc/nodepools": {
      "get": {
        "tags": [
          "Training-Cluster-Node-Pools"
        ],
        "summary": "Retrieve information about training node pools belonging to a project or cluster.",
        "operationId": "listTrainingClusterNodePools",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ClusterID",
            "name": "cluster_id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "my-slurm-node-pool",
            "x-go-name": "Name",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listTrainingNodePoolsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Training-Cluster-Node-Pools"
        ],
        "summary": "Create a new training node pool owned by the logged in user.",
        "operationId": "createTrainingClusterNodePool",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTCNodePoolPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/mtc/nodepools/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe Training Cluster Node Pool resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Training-Cluster-Node-Pool-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getTrainingClusterNodePoolsOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/mtc/nodepools/{node_pool_id}": {
      "get": {
        "tags": [
          "Training-Cluster-Node-Pools"
        ],
        "summary": "Retrieve information about a particular training node pool belonging to the project.",
        "operationId": "getTrainingClusterNodePool",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "NodePoolID",
            "name": "node_pool_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getTrainingNodePoolResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "Training-Cluster-Node-Pools"
        ],
        "summary": "Delete a node pool that the logged in user owns.",
        "operationId": "deleteTrainingClusterNodePool",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "NodePoolID",
            "name": "node_pool_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "tags": [
          "Training-Cluster-Node-Pools"
        ],
        "summary": "Update a node pool that the logged in user owns.",
        "operationId": "updateTrainingClusterNodePool",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "NodePoolID",
            "name": "node_pool_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MTCNodePoolPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/ib-networks": {
      "get": {
        "tags": [
          "IB-Networks"
        ],
        "summary": "Retrieve details for all Infiniband networks.",
        "operationId": "listIBNetworks",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listIbNetworksResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/ib-networks/{ib_network_id}": {
      "get": {
        "tags": [
          "IB-Networks"
        ],
        "summary": "Retrieve details for an Infiniband network.",
        "operationId": "getIBNetwork",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "IBNetworkID",
            "name": "ib_network_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIbNetworkResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/ib-partitions": {
      "get": {
        "tags": [
          "IB-Partitions"
        ],
        "summary": "Retrieve details for all Infiniband partitions that belongs to the user.",
        "operationId": "listIBPartitions",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listIBPartitionsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "tags": [
          "IB-Partitions"
        ],
        "summary": "Create a new Infiniband partition owned by the logged in user.",
        "operationId": "createIBPartition",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IBPartitionsPostRequestV1Alpha5"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ibPartitionsPostResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/ib-partitions/{ib_partition_id}": {
      "get": {
        "tags": [
          "IB-Partitions"
        ],
        "summary": "Retrieve details for an Infiniband partition that belongs to the user.",
        "operationId": "getIBPartition",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "IBPartitionID",
            "name": "ib_partition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIbPartitionResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "IB-Partitions"
        ],
        "summary": "Delete an Infiniband partition owned by the logged in user.",
        "operationId": "deleteIBPartition",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "IBPartitionID",
            "name": "ib_partition_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/load-balancers": {
      "get": {
        "tags": [
          "Load-Balancers"
        ],
        "summary": "Retrieve details about all load balancers that belong to the logged in user.",
        "operationId": "listLoadBalancers",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listLoadBalancersResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Load-Balancers"
        ],
        "summary": "Create a new load balancer owned by the logged in user.",
        "operationId": "createLoadBalancer",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadBalancersPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/load-balancers/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe Load Balancers resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "Load-Balancer-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listNetworkingLoadBalancersOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/load-balancers/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe Load Balancer resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Load-Balancer-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getNetworkingLoadBalancersOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/load-balancers/{load_balancer_id}": {
      "get": {
        "tags": [
          "Load-Balancers"
        ],
        "summary": "Retrieve details for a load balancer that belongs to the logged in user.",
        "operationId": "getLoadBalancer",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "LoadBalancerID",
            "name": "load_balancer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getLoadBalancerResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Load-Balancers"
        ],
        "summary": "Delete a load balancer owned by the logged in user.",
        "operationId": "deleteLoadBalancer",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "LoadBalancerID",
            "name": "load_balancer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "description": "A successful response from this resource will contain the async operation.\nTo disable health checking, pass \"health_check\": {\"port\": 0}",
        "tags": [
          "Load-Balancers"
        ],
        "summary": "Patch (update) a load balancer owned by the logged in user.",
        "operationId": "patchLoadBalancer",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "LoadBalancerID",
            "name": "load_balancer_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadBalancersPatchRequestV1Alpha5"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-firewall-rules": {
      "get": {
        "tags": [
          "VPC-Firewall-Rules"
        ],
        "summary": "Retrieve details about all VPC firewall rules that belong to the logged in user.",
        "operationId": "listVPCFirewallRules",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listVpcFirewallRulesResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "VPC-Firewall-Rules"
        ],
        "summary": "Create a new VPC firewall rule owned by the logged in user.",
        "operationId": "createVPCFirewallRule",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VPCFirewallRulesPostRequestV1Alpha5"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-firewall-rules/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe snapshots resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "VPC-Firewall-Rule-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listNetworkingVPCFirewallRulesOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-firewall-rules/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe snapshots resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "VPC-Firewall-Rule-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getNetworkingVPCFirewallRulesOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-firewall-rules/{vpc_firewall_rule_id}": {
      "get": {
        "tags": [
          "VPC-Firewall-Rules"
        ],
        "summary": "Retrieve details for a VPC firewall rule that belongs to the logged in user.",
        "operationId": "getVPCFirewallRule",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCFirewallRuleID",
            "name": "vpc_firewall_rule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVpcFirewallRuleResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "VPC-Firewall-Rules"
        ],
        "summary": "Delete a VPC firewall rule owned by the logged in user.",
        "operationId": "deleteVPCFirewallRule",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCFirewallRuleID",
            "name": "vpc_firewall_rule_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "VPC-Firewall-Rules"
        ],
        "summary": "Patch (update) a VPC firewall rule owned by the logged in user.",
        "operationId": "patchVPCFirewallRule",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCFirewallRuleID",
            "name": "vpc_firewall_rule_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VPCFirewallRulesPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-networks": {
      "get": {
        "tags": [
          "VPC-Networks"
        ],
        "summary": "Retrieve details about all VPC networks that belong to the logged in user.",
        "operationId": "listVPCNetworks",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listVPCNetworksResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain information regarding the created VPC network.",
        "tags": [
          "VPC-Networks"
        ],
        "summary": "Create a new VPC network owned by the logged in user.",
        "operationId": "createVPCNetwork",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VPCNetworkPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/vpcNetworkPostResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-networks/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe VPC Networks resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "VPC-Network-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listNetworkingVPCNetworksOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-networks/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe VPC Network resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "VPC-Network-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getNetworkingVPCNetworksOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-networks/{vpc_network_id}": {
      "get": {
        "tags": [
          "VPC-Networks"
        ],
        "summary": "Retrieve details for a VPC network that belongs to the logged in user.",
        "operationId": "getVPCNetwork",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCNetworkID",
            "name": "vpc_network_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVPCNetworkResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "VPC-Networks"
        ],
        "summary": "Delete a VPC network owned by the logged in user.",
        "operationId": "deleteVPCNetwork",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCNetworkID",
            "name": "vpc_network_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "VPC-Networks"
        ],
        "summary": "Patch (update) a VPC network owned by the logged in user.",
        "operationId": "patchVPCNetwork",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCNetworkID",
            "name": "vpc_network_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VPCNetworkPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-subnets": {
      "get": {
        "tags": [
          "VPC-Subnets"
        ],
        "summary": "Retrieve details about all VPC subnets that belong to the logged in user.",
        "operationId": "listVPCSubnets",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listVpcSubnetsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain information regarding the created subnet.",
        "tags": [
          "VPC-Subnets"
        ],
        "summary": "Create a new VPC subnet owned by the logged in user.",
        "operationId": "createVPCSubnet",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VPCSubnetPostRequest"
            }
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/vpcSubnetPostResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-subnets/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe VPC Networks resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "VPC-Subnet-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listNetworkingVPCSubnetsOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-subnets/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe VPC Subnet resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "VPC-Subnet-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getNetworkingVPCSubnetsOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/networking/vpc-subnets/{vpc_subnet_id}": {
      "get": {
        "tags": [
          "VPC-Subnets"
        ],
        "summary": "Retrieve details for a VPC subnet that belongs to the logged in user.",
        "operationId": "getVPCSubnet",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCSubnetID",
            "name": "vpc_subnet_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVpcSubnetResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "VPC-Subnets"
        ],
        "summary": "Delete a VPC subnet owned by the logged in user.",
        "operationId": "deleteVPCSubnet",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCSubnetID",
            "name": "vpc_subnet_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "VPC-Subnets"
        ],
        "summary": "Patch (update) a VPC subnet owned by the logged in user.",
        "operationId": "patchVPCSubnet",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "VPCSubnetID",
            "name": "vpc_subnet_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VPCSubnetPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/quotas": {
      "get": {
        "tags": [
          "Quotas"
        ],
        "summary": "List max and currently used project quotas.",
        "operationId": "listProjectQuotas",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listProjectQuotasResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/disks": {
      "get": {
        "description": "Size of disks will be in gibibytes (GiB)",
        "tags": [
          "Disks"
        ],
        "summary": "Retrieve details about all disks that belong to the logged in user.",
        "operationId": "listDisks",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listDisksResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "Requires either a disk snapshot ID, or size and location, where size of disk\nshould be in gibibytes (GiB) or tebibytes (TiB) in the format [Size][Unit].\nE.g. 10GiB. Disk type must be one of: DISK_TYPE_PERSISTENT_SSD.\nA successful response from this resource will contain the async operation.",
        "tags": [
          "Disks"
        ],
        "summary": "Create a new disk owned by the logged in user.",
        "operationId": "createDisk",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisksPostRequestV1Alpha5"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/disks/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe disks resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "Disk-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listStorageDisksOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/disks/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe disks resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Disk-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getStorageDisksOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/disks/{disk_id}": {
      "get": {
        "description": "Size of disk will be in gibibytes (GiB)",
        "tags": [
          "Disks"
        ],
        "summary": "Retrieve details for a disk that belongs to the logged in user.",
        "operationId": "getDisk",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "DiskID",
            "name": "disk_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDiskResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Disks"
        ],
        "summary": "Delete a disk owned by the logged in user.",
        "operationId": "deleteDisk",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "DiskID",
            "name": "disk_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "patch": {
        "description": "Size should be in gibibytes (GiB) or tebibytes (TiB) in the format\n[Size][Unit]. E.g. 10GiB A successful response from this resource will\ncontain the async operation.",
        "tags": [
          "Disks"
        ],
        "summary": "Resize a disk that the logged in user owns.",
        "operationId": "resizeDisk",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "DiskID",
            "name": "disk_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisksPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/snapshots": {
      "get": {
        "description": "Size of snapshots will be in bytes.",
        "tags": [
          "Snapshots"
        ],
        "summary": "Retrieve details about all disk snapshots that belong to the logged in user.",
        "operationId": "listDiskSnapshots",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listDiskSnapshotsResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Snapshots"
        ],
        "summary": "Create a new snapshot for a disk owned by the logged in user.",
        "operationId": "createDiskSnapshot",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiskSnapshotPostRequestV1Alpha5"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/snapshots/operations": {
      "get": {
        "description": "This resource retrieves information about the status of asynchronous operations initiated by\nthe snapshots resource. All operations that are either in-flight or completed but not yet\nqueried will be returned.",
        "tags": [
          "Snapshot-Operations"
        ],
        "summary": "Get status of asynchronous operations",
        "operationId": "listStorageSnapshotsOperations",
        "parameters": [
          {
            "type": "string",
            "example": "452580d7-41d1-4b63-b4d7-4e4e21e95f96",
            "x-go-name": "ResourceID",
            "name": "resource_id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "IN_PROGRESS"
            ],
            "x-go-name": "State",
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listOperationsResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/snapshots/operations/{operation_id}": {
      "get": {
        "description": "This resource retrieves information about the status of an asynchronous operation initiated by\nthe snapshots resource. Only information about the operation specified in the path will be returned,\nor an HTTP 403 will be returned if the operation does not exist, was not initiated by the logged\nin user, or has expired.",
        "tags": [
          "Snapshot-Operations"
        ],
        "summary": "Get status of a single asynchronous operation",
        "operationId": "getStorageSnapshotsOperation",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "OperationID",
            "name": "operation_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOperationResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/projects/{project_id}/storage/snapshots/{snapshot_id}": {
      "get": {
        "description": "Size of snapshot will be in bytes.",
        "tags": [
          "Snapshots"
        ],
        "summary": "Retrieve details about a disk snapshot that belongs to the logged in user.",
        "operationId": "getDiskSnapshot",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "SnapshotID",
            "name": "snapshot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getSnapshotResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "description": "A successful response from this resource will contain the async operation.",
        "tags": [
          "Snapshots"
        ],
        "summary": "Delete a disk snapshot owned by the logged in user.",
        "operationId": "deleteDiskSnapshot",
        "parameters": [
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "ProjectID",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab",
            "x-go-name": "SnapshotID",
            "name": "snapshot_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/asyncOperationResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/users/identities": {
      "get": {
        "tags": [
          "Identities"
        ],
        "summary": "Retrieve user details for the logged in user.",
        "operationId": "getUserIdentity",
        "responses": {
          "200": {
            "$ref": "#/responses/usersGetResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "put": {
        "description": "A successful response from this resource wil contain the updated user details.",
        "tags": [
          "Identities"
        ],
        "summary": "Update user details for the logged in user.",
        "operationId": "updateUserIdentity",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentityPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/usersPutResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/users/inference-api-key": {
      "get": {
        "tags": [
          "InferenceAPIKey"
        ],
        "summary": "Retrieve all active/expired Inference API Keys for the logged in user.",
        "operationId": "getInferenceAPIKeys",
        "responses": {
          "200": {
            "$ref": "#/responses/inferenceAPIKeyGetResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain json-encoded details of the inference API key.\nThis is the only time the customer will be able to view the api key associated with the API key id.",
        "tags": [
          "InferenceAPIKey"
        ],
        "summary": "Create a new inference api key owned by the logged in user.",
        "operationId": "createInferenceAPIKey",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInferenceAPIKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/inferenceAPIKeyPostResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "InferenceAPIKey"
        ],
        "summary": "Delete an Inference API Key owned by the logged in user.",
        "operationId": "deleteInferenceAPIKey",
        "parameters": [
          {
            "type": "string",
            "example": "WTUzcGibQ82y9_01h4MCdQ",
            "x-go-name": "KeyID",
            "name": "key_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/users/ssh-keys": {
      "get": {
        "tags": [
          "SSH-Keys"
        ],
        "summary": "Retrieve the list of SSH public keys registered to the logged in user.",
        "operationId": "getSSHKeys",
        "responses": {
          "200": {
            "$ref": "#/responses/getSSHKeysResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource wil contain the created SSH key details.",
        "tags": [
          "SSH-Keys"
        ],
        "summary": "Register a new SSH public key to the logged in user.",
        "operationId": "createSSHKey",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSSHKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createSSHKeysResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "SSH-Keys"
        ],
        "summary": "Delete an SSH public key registered to the logged in user.",
        "operationId": "deleteSSHKey",
        "parameters": [
          {
            "type": "string",
            "example": "6e28cad3-98e6-47a9-a9fc-1cd83a7f25c1",
            "x-go-name": "ID",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "$ref": "#/responses/badReqError"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    },
    "/users/tokens": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Retrieve all active/expired API tokens for the logged in user.",
        "operationId": "getTokens",
        "responses": {
          "200": {
            "$ref": "#/responses/tokensGetResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "post": {
        "description": "A successful response from this resource will contain json-encoded details of API token.\nThis is the only time the customer will be able to view the secret key associated with the token.",
        "tags": [
          "Tokens"
        ],
        "summary": "Create a new token owned by the logged in user.",
        "operationId": "createToken",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tokensPostResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      },
      "delete": {
        "tags": [
          "Tokens"
        ],
        "summary": "Delete an API token owned by the logged in user.",
        "operationId": "deleteToken",
        "parameters": [
          {
            "type": "string",
            "example": "WTUzcGibQ82y9_01h4MCdQ",
            "x-go-name": "AccessKey",
            "name": "access_key",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          },
          "401": {
            "$ref": "#/responses/authError"
          },
          "403": {
            "$ref": "#/responses/permissionsError"
          },
          "500": {
            "$ref": "#/responses/serverError"
          }
        }
      }
    }
  },
  "definitions": {
    "AsyncOperationResponse": {
      "type": "object",
      "title": "AsyncOperationResponse is the response type for endpoints which return async operations.",
      "required": [
        "operation"
      ],
      "properties": {
        "operation": {
          "$ref": "#/definitions/Operation"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "AttachedDiskV1Alpha5": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "size",
        "location",
        "block_size",
        "created_at",
        "updated_at",
        "serial_number",
        "attachment_type",
        "mode"
      ],
      "properties": {
        "attachment_type": {
          "type": "string",
          "x-go-name": "AttachmentType",
          "example": "os | data"
        },
        "block_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BlockSize",
          "example": 4096
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentral1-a"
        },
        "mode": {
          "type": "string",
          "x-go-name": "Mode",
          "example": "read-write | read-only"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-disk"
        },
        "serial_number": {
          "type": "string",
          "x-go-name": "SerialNumber",
          "example": "96FD14FDBCF7E21E8EC"
        },
        "size": {
          "type": "string",
          "x-go-name": "Size",
          "example": "10GiB"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "persistent-ssd"
        },
        "updated_at": {
          "type": "string",
          "x-go-name": "UpdatedAt",
          "example": "2021-12-03T19:58:34Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "AuditLogsGetResponse": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogEntry"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Billing": {
      "type": "object",
      "title": "Billing contains information about the billing status of an organization.",
      "required": [
        "balance",
        "has_valid_payment_method",
        "delinquent"
      ],
      "properties": {
        "balance": {
          "type": "string",
          "x-go-name": "Balance",
          "example": "$1000.00"
        },
        "delinquent": {
          "type": "boolean",
          "x-go-name": "Delinquent",
          "example": false
        },
        "has_valid_payment_method": {
          "type": "boolean",
          "x-go-name": "HasValidPaymentMethod",
          "example": true
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "BillingAddress": {
      "type": "object",
      "title": "BillingAddress contains sensitive information related to the billing address for an entity.",
      "required": [
        "address_line1",
        "city",
        "state_or_region",
        "postal_code",
        "country"
      ],
      "properties": {
        "address_line1": {
          "type": "string",
          "x-go-name": "AddressLine1",
          "example": "123 Main Street"
        },
        "address_line2": {
          "type": "string",
          "x-go-name": "AddressLine2",
          "example": "Suite 400"
        },
        "city": {
          "type": "string",
          "x-go-name": "City",
          "example": "Denver"
        },
        "country": {
          "type": "string",
          "x-go-name": "Country",
          "example": "US"
        },
        "postal_code": {
          "type": "string",
          "x-go-name": "PostalCode",
          "example": "80202"
        },
        "state_or_region": {
          "type": "string",
          "x-go-name": "StateOrRegion",
          "example": "Colorado"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "BillingIntentGetResponse": {
      "type": "object",
      "title": "BillingIntentGetResponse is the response type for Get requests to the entities/billing/intent endpoint.",
      "required": [
        "intent"
      ],
      "properties": {
        "intent": {
          "type": "string",
          "x-go-name": "Intent",
          "example": "https://billing.stripe.com/session/{SESSION_SECRET}"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "BulkCreateLocationInfo": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "ib_partition_id": {
          "description": "The ID of the Infiniband partition to create the VMs in, if an IB type was specified.\nMust be in the same location as the VMs.",
          "type": "string",
          "x-go-name": "IBPartitionID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "location": {
          "description": "The location to create the VMs in.",
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentral1-a"
        },
        "subnet_id": {
          "description": "The ID of the subnet to create the VMs in. Must be in the same location\nas the VMs. If not provided, the default subnet for the location will be\nused, if there is one.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "BulkInstancePostRequestV1Alpha5": {
      "type": "object",
      "required": [
        "name_prefix",
        "count"
      ],
      "properties": {
        "count": {
          "description": "The number of VMs to create. If multiple locations are specified, this will be the number of VMs\ncreated in each location.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 6
        },
        "instance_group_id": {
          "description": "The ID of the instance group the VMs will be created in.",
          "type": "string",
          "x-go-name": "InstanceGroupID",
          "example": "cda562c4-6162-4565-95f3-ce06a8220c07"
        },
        "instance_template": {
          "$ref": "#/definitions/InstanceTemplatePostRequestV1Alpha5"
        },
        "instance_template_id": {
          "description": "The ID of the instance template to use for creating the VMs.",
          "type": "string",
          "x-go-name": "InstanceTemplateID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "locations": {
          "description": "The locations to create the VMs in. This will override any location specified in the instance template.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkCreateLocationInfo"
          },
          "x-go-name": "Locations"
        },
        "name_prefix": {
          "description": "The name prefix for the VMs to be created. E.g. \"my-vm\" will create VMs with names \"my-vm-1\",",
          "type": "string",
          "x-go-name": "NamePrefix",
          "example": "my-vm"
        },
        "reservation_specification": {
          "$ref": "#/definitions/ReservationSpecification"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CapacityV1Alpha5": {
      "type": "object",
      "required": [
        "location",
        "quantity"
      ],
      "properties": {
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-east"
        },
        "num_slices": {
          "description": "NumSlices is the number of slices that make up the resource",
          "type": "integer",
          "format": "uint32",
          "x-go-name": "NumSlices",
          "example": 1
        },
        "quantity": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Quantity",
          "example": 8
        },
        "quota_type": {
          "description": "QuotaType is the enum string for the quota type consumed by this resource",
          "type": "string",
          "x-go-name": "QuotaType",
          "example": "PROJECT_QUOTA_TYPE_MAXIMUM_VM_SLICES_VCPU_6_MEM_60_A40_PCIE_48GB_1"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CreateInferenceAPIKeyRequest": {
      "type": "object",
      "required": [
        "expires_at"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "x-go-name": "Alias",
          "example": "token1"
        },
        "expires_at": {
          "type": "string",
          "x-go-name": "ExpiresAt",
          "example": "2021-12-03T19:58:34Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CreateSSHKeyRequest": {
      "type": "object",
      "required": [
        "name",
        "public_key"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "John Doe"
        },
        "public_key": {
          "type": "string",
          "x-go-name": "PublicKey",
          "example": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICpuH/fqCFLbAConChyVH6rZzSaxlnHSwQk6qvtPsf5E"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CreateSSHKeyResponse": {
      "type": "object",
      "required": [
        "ssh_key"
      ],
      "properties": {
        "ssh_key": {
          "$ref": "#/definitions/SSHKey"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CreateTokenRequest": {
      "type": "object",
      "required": [
        "expires_at"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "x-go-name": "Alias",
          "example": "token1"
        },
        "expires_at": {
          "type": "string",
          "x-go-name": "ExpiresAt",
          "example": "2021-12-03T19:58:34Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CredentialsDeleteRequest": {
      "type": "object",
      "title": "CredentialsDeleteRequest is the request type for DELETE requests to the credentials endpoint.",
      "required": [
        "credential_type"
      ],
      "properties": {
        "credential_type": {
          "$ref": "#/definitions/IdentityCredentialsType"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CredentialsResponse": {
      "type": "object",
      "required": [
        "credentials"
      ],
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Credentials"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CustomImagePatchRequest": {
      "type": "object",
      "title": "CustomImagePatchRequest is the request type for PATCH requests to the /custom-images/{id} endpoint.",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description",
          "example": "\"Ubuntu is the modern, open source operating system on Linux for ...\""
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CustomImagePatchResponse": {
      "type": "object",
      "title": "CustomImagePatchResponse is the response type for PATCH requests to the /custom-images/{id} endpoint.",
      "properties": {
        "image": {
          "$ref": "#/definitions/Image"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "CustomImagePostRequest": {
      "type": "object",
      "title": "CustomImagePostRequest is the request type for POST requests to the /custom-images endpoint.",
      "required": [
        "DiskID",
        "name"
      ],
      "properties": {
        "DiskID": {
          "type": "string",
          "example": "182d01c7-d3fe-424b-af13-8775aeead194"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description",
          "example": "Ubuntu is the modern, open source operating system on Linux for ..."
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "ubuntu"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags",
          "example": "22.04,latest"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DeleteOrgMFARequest": {
      "type": "object",
      "required": [
        "mfa_method"
      ],
      "properties": {
        "mfa_method": {
          "type": "string",
          "x-go-name": "MFAMethod",
          "example": "totp"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DiskAttachment": {
      "type": "object",
      "required": [
        "disk_id",
        "mode",
        "attachment_type"
      ],
      "properties": {
        "attachment_type": {
          "type": "string",
          "enum": [
            "os",
            "data"
          ],
          "x-go-name": "AttachmentType",
          "example": "data"
        },
        "disk_id": {
          "type": "string",
          "x-go-name": "DiskID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "mode": {
          "type": "string",
          "enum": [
            "read-only",
            "read-write"
          ],
          "x-go-name": "Mode",
          "example": "read-only, read-write"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DiskModeType": {
      "type": "string",
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DiskSnapshot": {
      "type": "object",
      "required": [
        "id",
        "created_at",
        "updated_at",
        "created_from",
        "size",
        "block_size"
      ],
      "properties": {
        "block_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BlockSize",
          "example": 4096
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "created_from": {
          "type": "string",
          "x-go-name": "CreatedFrom",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "size": {
          "type": "string",
          "x-go-name": "Size",
          "example": "10457 bytes"
        },
        "updated_at": {
          "type": "string",
          "x-go-name": "UpdatedAt",
          "example": "2021-12-03T19:58:34Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DiskSnapshotPostRequestV1Alpha5": {
      "type": "object",
      "required": [
        "disk_id"
      ],
      "properties": {
        "disk_id": {
          "type": "string",
          "x-go-name": "DiskID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DiskTemplate": {
      "type": "object",
      "title": "DiskTemplate defines a disk to create for each VM during bulk VM creation.",
      "required": [
        "size",
        "type"
      ],
      "properties": {
        "size": {
          "type": "string",
          "x-go-name": "Size",
          "example": "10GiB"
        },
        "type": {
          "type": "string",
          "enum": [
            "persistent-ssd",
            "shared-volume"
          ],
          "x-go-name": "Type",
          "example": "persistent-ssd"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DiskV1Alpha5": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "size",
        "location",
        "block_size",
        "created_at",
        "updated_at",
        "serial_number",
        "attached_to"
      ],
      "properties": {
        "attached_to": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VMAttachmentV1Alpha5"
          },
          "x-go-name": "AttachedTo"
        },
        "block_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BlockSize",
          "example": 4096
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentral1-a"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-disk"
        },
        "serial_number": {
          "type": "string",
          "x-go-name": "SerialNumber",
          "example": "96FD14FDBCF7E21E8EC"
        },
        "size": {
          "type": "string",
          "x-go-name": "Size",
          "example": "10GiB"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "persistent-ssd"
        },
        "updated_at": {
          "type": "string",
          "x-go-name": "UpdatedAt",
          "example": "2021-12-03T19:58:34Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DisksPatchRequest": {
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "size": {
          "type": "string",
          "x-go-name": "Size",
          "example": "10GiB"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "DisksPostRequestV1Alpha5": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "block_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "BlockSize",
          "example": 4096
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentral1-a"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-disk"
        },
        "size": {
          "type": "string",
          "x-go-name": "Size",
          "example": "10GiB"
        },
        "snapshot_id": {
          "type": "string",
          "x-go-name": "DiskSnapshotID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        },
        "type": {
          "type": "string",
          "default": "persistent-ssd",
          "enum": [
            "persistent-ssd",
            "shared-volume"
          ],
          "x-go-name": "Type",
          "example": "persistent-ssd"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "EntitiesPutPostRequest": {
      "type": "object",
      "title": "EntitiesPutPostRequest is the request type for PUT and POST requests to the entities endpoint.",
      "properties": {
        "billing_addr": {
          "$ref": "#/definitions/BillingAddress"
        },
        "organization_name": {
          "type": "string",
          "x-go-name": "OrganizationName",
          "example": "Crusoe Energy"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "EntitiesPutPostResponse": {
      "type": "object",
      "title": "EntitiesPutPostResponse is the response type for PUT and POST requests to the entities endpoint.",
      "required": [
        "entity"
      ],
      "properties": {
        "entity": {
          "$ref": "#/definitions/Entity"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Entity": {
      "type": "object",
      "title": "Entity contains identifying information for an organization.",
      "required": [
        "id",
        "name",
        "relation",
        "billing",
        "features",
        "state",
        "state_reason"
      ],
      "properties": {
        "billing": {
          "$ref": "#/definitions/Billing"
        },
        "billing_addr": {
          "$ref": "#/definitions/BillingAddress"
        },
        "features": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "Features"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "mfa_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MFAMethod"
          },
          "x-go-name": "MFAMethods"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "Crusoe Energy"
        },
        "organization_type": {
          "type": "string",
          "enum": [
            "standard",
            "enterprise"
          ],
          "x-go-name": "OrganizationType"
        },
        "registration_type": {
          "type": "string",
          "x-go-name": "RegistrationType",
          "example": "waitlist"
        },
        "relation": {
          "type": "string",
          "x-go-name": "Relation",
          "example": "owner"
        },
        "state": {
          "type": "string",
          "x-go-name": "State"
        },
        "state_reason": {
          "type": "string",
          "x-go-name": "StateReason"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ErrorBody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "x-go-name": "Code"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "FeatureFlagsGetResponse": {
      "type": "object",
      "title": "FeatureFlagsGetResponse is the response type for GET requests to the feature flags endpoint.",
      "required": [
        "feature_flags"
      ],
      "properties": {
        "feature_flags": {
          "type": "object",
          "additionalProperties": {},
          "x-go-name": "FeatureFlags",
          "example": {
            "curated-images": true,
            "infiniband": false
          }
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Fingerprints": {
      "type": "object",
      "required": [
        "md5",
        "sha256"
      ],
      "properties": {
        "md5": {
          "type": "string",
          "x-go-name": "MD5",
          "example": "bf:60:fa:cc:9f:42:1f:5e:23:9e:ed:d2:69:d8:76:93"
        },
        "sha256": {
          "type": "string",
          "x-go-name": "SHA256",
          "example": "tARFxQkVHeqm6TzqpI897QsHVdgZlxgL2/YhVltmEUk"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "FirewallRuleObject": {
      "description": "It has two fields: CIDR and ResourceID. The CIDR field may either be a\nCIDR or an IP address. If an IP, it will be converted to a CIDR. Resource ids\nof VPC networks, Subnets, and VMs are the only allowed. Only one of the two\nfields can be non empty.",
      "type": "object",
      "title": "FirewallRuleObject specifies the source or destination of a firewall rule.",
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "CIDR",
          "example": "10.1.2.3/24"
        },
        "resource_id": {
          "type": "string",
          "x-go-name": "ResourceID",
          "example": "306aa10d-5570-4e47-88c9-46bf11bd8737"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "GeneratedInferenceAPIKey": {
      "type": "object",
      "required": [
        "key_id",
        "api_key",
        "created_at",
        "expires_at"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "x-go-name": "Alias",
          "example": "newAPIKey"
        },
        "api_key": {
          "type": "string",
          "x-go-name": "APIKey",
          "example": "R7p5XctCQMuGlpVBmVdqzA"
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-11-03T22:16:27Z"
        },
        "expires_at": {
          "type": "string",
          "x-go-name": "ExpiresAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "key_id": {
          "type": "string",
          "x-go-name": "KeyID",
          "example": "R7p5XctCQMuGlpVBmVdqzA"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "GeneratedToken": {
      "description": "These are the fields returned from a PUT request.",
      "type": "object",
      "title": "GeneratedToken contains the Traits Island stores for a Token inside of Kratos.",
      "required": [
        "access_key",
        "secret_key",
        "created_at",
        "expires_at"
      ],
      "properties": {
        "access_key": {
          "type": "string",
          "x-go-name": "AccessKey",
          "example": "R7p5XctCQMuGlpVBmVdqzA"
        },
        "alias": {
          "type": "string",
          "x-go-name": "Alias",
          "example": "newtoken"
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-11-03T22:16:27Z"
        },
        "expires_at": {
          "type": "string",
          "x-go-name": "ExpiresAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "secret_key": {
          "type": "string",
          "x-go-name": "SecretKey",
          "example": "HrbZ3VTUb2YNAq53Md1EsA"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "GetOrgMFAResponse": {
      "type": "object",
      "title": "GetOrgMFAResponse is the response type for GET requests to the org mfa endpoint.",
      "properties": {
        "mfa_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MFAMethod"
          },
          "x-go-name": "MFAMethods",
          "example": [
            "totp",
            "webauthn"
          ]
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "HealthCheckOptions": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "failure_count": {
          "type": "string",
          "x-go-name": "FailureCount",
          "example": "3"
        },
        "interval": {
          "type": "string",
          "x-go-name": "Interval",
          "example": "60"
        },
        "port": {
          "type": "string",
          "x-go-name": "Port",
          "example": "8080"
        },
        "success_count": {
          "type": "string",
          "x-go-name": "SuccessCount",
          "example": "2"
        },
        "timeout": {
          "type": "string",
          "x-go-name": "Timeout",
          "example": "20"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "HostChannelAdapter": {
      "type": "object",
      "required": [
        "type",
        "guid",
        "ib_network_id",
        "ib_partition_id"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "x-go-name": "GUID",
          "example": "946d:ae03:0021:69aa"
        },
        "ib_network_id": {
          "type": "string",
          "x-go-name": "IBNetworkID",
          "example": "ca39e669-47ee-456b-968d-303234fbf99f"
        },
        "ib_partition_id": {
          "type": "string",
          "x-go-name": "IBPartitionID",
          "example": "ca39e669-47ee-456b-968d-303234fbf99f"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "infiniband"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "IBNetwork": {
      "type": "object",
      "required": [
        "id",
        "name",
        "location",
        "capacities"
      ],
      "properties": {
        "capacities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IBNetworkCapacity"
          },
          "x-go-name": "Capacities"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-east"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "ib-network-1"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "IBNetworkCapacity": {
      "type": "object",
      "required": [
        "quantity",
        "slice_type"
      ],
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Quantity",
          "example": 8
        },
        "slice_type": {
          "type": "string",
          "x-go-name": "SliceType",
          "example": "16 vCPUs & 125GB RAM & 1 A100 (40GB) GPU"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "IBPartition": {
      "type": "object",
      "required": [
        "id",
        "name",
        "ib_network_id"
      ],
      "properties": {
        "ib_network_id": {
          "type": "string",
          "x-go-name": "IBNetworkID",
          "example": "36c0b0d9-8b68-4869-addb-227b06b64ee0"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "44701f9e-845c-4005-9240-adee6401b8d3"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-ib-partition"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "IBPartitionsPostRequestV1Alpha5": {
      "type": "object",
      "title": "IBPartitionsPostRequestV1Alpha5 is the request type for POST requests to the IB Partitions endpoint.",
      "required": [
        "name",
        "ib_network_id"
      ],
      "properties": {
        "ib_network_id": {
          "type": "string",
          "x-go-name": "IBNetworkID",
          "example": "36c0b0d9-8b68-4869-addb-227b06b64ee0"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-ib-partition"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "IPAddresses": {
      "type": "object",
      "required": [
        "private_ipv4",
        "public_ipv4"
      ],
      "properties": {
        "private_ipv4": {
          "$ref": "#/definitions/PrivateIPv4Address"
        },
        "public_ipv4": {
          "$ref": "#/definitions/PublicIPv4Address"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Identity": {
      "description": "Identity contains the Traits Island stores for a User inside of Kratos. These are\nthe fields returned from a GET or PUT request.",
      "type": "object",
      "required": [
        "id",
        "email",
        "name",
        "role"
      ],
      "properties": {
        "accepted_tos": {
          "type": "boolean",
          "x-go-name": "AcceptedTos",
          "example": true
        },
        "email": {
          "type": "string",
          "x-go-name": "Email",
          "example": "john.doe@crusoeenergy.com"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "latest_authmethod": {
          "type": "string",
          "x-go-name": "LatestAuthMethod",
          "example": "password"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "John Doe"
        },
        "registration_type": {
          "type": "string",
          "x-go-name": "RegistrationType",
          "example": "waitlist"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role",
          "example": "Admin"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "IdentityCredentialsType": {
      "type": "string",
      "title": "IdentityCredentialsType and so on.",
      "x-go-package": "github.com/ory/kratos-client-go"
    },
    "IdentityPutRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "John Doe"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role",
          "example": "Admin"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Image": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description",
        "tags",
        "created_at",
        "locations"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2023-06-29T20:03:26Z"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description",
          "example": "base Ubuntu 20.04 image"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Locations",
          "example": "[us-east1, us-northcentral1]"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "ubuntu"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags",
          "example": "[20.4, latest]"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InferenceAPIKeyInfo": {
      "description": "These are the fields returned from a GET request.",
      "type": "object",
      "title": "TokenInfo contains the Traits Island stores for a Token inside of Kratos.",
      "required": [
        "alias",
        "key_id",
        "created_at",
        "expires_at",
        "last_used"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "x-go-name": "Alias",
          "example": "token1"
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-11-03T22:16:27Z"
        },
        "expires_at": {
          "type": "string",
          "x-go-name": "ExpiresAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "key_id": {
          "type": "string",
          "x-go-name": "KeyID",
          "example": "Hm11C1coQZm2+Aihn9ofYg"
        },
        "last_used": {
          "type": "string",
          "x-go-name": "LastUsed",
          "example": "2021-11-03T22:22:55Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InferenceAPIKeyPostResponse": {
      "type": "object",
      "required": [
        "api_key_info"
      ],
      "properties": {
        "api_key_info": {
          "$ref": "#/definitions/GeneratedInferenceAPIKey"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstanceGroup": {
      "type": "object",
      "title": "InstanceGroup defines the specification of an instance group.",
      "required": [
        "name",
        "id",
        "template_id",
        "created_at",
        "updated_at",
        "project_id",
        "running_instance_count",
        "instances",
        "desired_count"
      ],
      "properties": {
        "created_at": {
          "description": "Time the instance template was created.",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2024-01-01T00:00:00Z"
        },
        "desired_count": {
          "description": "Desired VM Count for the instance group.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DesiredCount",
          "example": 3
        },
        "id": {
          "description": "ID of the instance group.",
          "type": "string",
          "x-go-name": "ID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "instances": {
          "description": "A list of IDs of instances currently in the instance group.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Instances",
          "example": [
            "066ce497-889e-4899-b53e-400df3fb7c0e"
          ]
        },
        "name": {
          "description": "Name of the instance group.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-instance-group"
        },
        "project_id": {
          "description": "Project ID of the project this instance template belongs to.",
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "b67aec22-2908-4427-994c-4e32be87477e"
        },
        "running_instance_count": {
          "description": "The number of running instances currently in the Instance Group.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RunningInstanceCount",
          "example": 3
        },
        "template_id": {
          "description": "Instance Template ID currently associated with the instance group.",
          "type": "string",
          "x-go-name": "TemplateID",
          "example": "7e6a6c5a-1314-409a-9e4f-3cc9f2a68fcc"
        },
        "updated_at": {
          "description": "Most recent time the instance group was updated.",
          "type": "string",
          "x-go-name": "UpdatedAt",
          "example": "2024-01-01T00:00:00Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstanceGroupPatchRequest": {
      "description": "This is a separate type from InstanceGroupPostRequest for clearer documentation, as these fields are not required\nin the PATCH endpoint.",
      "type": "object",
      "title": "InstanceGroupPatchRequest defines the specifications of the updates to be made to the instance group.",
      "properties": {
        "desired_count": {
          "description": "Desired VM Count for the instance group.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DesiredCount",
          "example": 3
        },
        "name": {
          "description": "Name of the instance group.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-instance-group"
        },
        "template_id": {
          "description": "Instance Template ID to be associated with the instance group.",
          "type": "string",
          "x-go-name": "TemplateID",
          "example": "7e6a6c5a-1314-409a-9e4f-3cc9f2a68fcc"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstanceGroupPostRequest": {
      "type": "object",
      "title": "InstanceGroupPostRequest defines the specifications of the instance group to be created.",
      "required": [
        "name",
        "template_id",
        "desired_count"
      ],
      "properties": {
        "desired_count": {
          "description": "Desired VM Count for the instance group.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DesiredCount",
          "example": 3
        },
        "name": {
          "description": "Name of the instance group.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-instance-group"
        },
        "template_id": {
          "description": "Instance Template ID to be associated with the instance group.",
          "type": "string",
          "x-go-name": "TemplateID",
          "example": "7e6a6c5a-1314-409a-9e4f-3cc9f2a68fcc"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstanceTemplate": {
      "type": "object",
      "title": "InstanceTemplate defines the specifications of VMs to be created during bulk VM creation.",
      "required": [
        "name",
        "id",
        "type",
        "ssh_public_key",
        "startup_script",
        "shutdown_script",
        "image_name",
        "ib_partition_id",
        "subnet_id",
        "location",
        "project_id",
        "created_at",
        "public_ip_address_type",
        "placement_policy",
        "maintenance_policy"
      ],
      "properties": {
        "created_at": {
          "description": "Time the instance template was created.",
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2024-01-01T00:00:00Z"
        },
        "disks": {
          "description": "Disks to create for all VMs created from this instance template.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiskTemplate"
          },
          "x-go-name": "Disks"
        },
        "ib_partition_id": {
          "description": "IB Partition to use for all VMs created from this instance template.\nOnly used for IB-enabled VM types. Empty if template has no location.",
          "type": "string",
          "x-go-name": "IBPartition",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "id": {
          "description": "ID of the instance template.",
          "type": "string",
          "x-go-name": "ID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "image_name": {
          "description": "OS Image to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "Image",
          "example": "ubuntu:20.04"
        },
        "location": {
          "description": "Location to use for all VMs created from this instance template.\nMay be empty if we do not want to bind this template to a location.",
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentral1-a"
        },
        "maintenance_policy": {
          "description": "The VM Host Maintenance Policy",
          "type": "string",
          "enum": [
            "stop-vm",
            "unspecified"
          ],
          "x-go-name": "MaintenancePolicy"
        },
        "name": {
          "description": "Name of the instance template. (This is not the name of the VMs created from this instance template.)",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-instance-template"
        },
        "placement_policy": {
          "description": "The VM Placement Policy",
          "type": "string",
          "enum": [
            "spread",
            "unspecified"
          ],
          "x-go-name": "PlacementPolicy"
        },
        "project_id": {
          "description": "Project ID of the project this instance template belongs to.",
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "public_ip_address_type": {
          "description": "Public IP address type to use for all VMs created from this instance template. Must either be \"static\" or \"dynamic\".",
          "type": "string",
          "x-go-name": "PublicIPAddressType",
          "example": "static"
        },
        "reservation_id": {
          "type": "string",
          "x-go-name": "ReservationID",
          "example": "804bf3a2-81f2-4d78-9a9e-dc6a55ed33d8"
        },
        "shutdown_script": {
          "description": "Shutdown script to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "ShutdownScript",
          "example": "#!/bin/bash\\necho'goodbye'"
        },
        "ssh_public_key": {
          "description": "SSH public key to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "SSHPubKey",
          "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCspdG97nTS/h4PEPq2QD2RYVK1jxFXLFZuSDMI8Rtxpucl6LDZLOghEYoj13lxKQnGtcsM3Iu68lh+4YgZe7CbI6cc/TxPbeAX2HJTqDh0J7+GAlLBHK9tsepC0QlhIDiazJptOPDZ3cesCBXdxSnzEbhDaqgYOfl393cp1fCeOKRIDWEP3H9CM25dCbWF66sTDziLsojJ9dMnxhgKm9/JkZc5gYncLT/2Ey+VWfV9Fs65mGUrBbQOn3c8S/nEk6WRcYn4PFOnIp0Mz+Chb50iCJrW677pllLnkTGSU+4c0H9J5z4HDG0I+91RoiQ0QsayFTYO1JtSn+THLuq98V+D"
        },
        "startup_script": {
          "description": "Startup script to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "StartupScript",
          "example": "#!/bin/bash\\necho'hello'"
        },
        "subnet_id": {
          "description": "SubnetID to use for all VMs created from this instance template.\nOnly used if template has a location.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "type": {
          "description": "Product name of the VM type we want to create from this instance template.",
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        },
        "virtualization_features": {
          "$ref": "#/definitions/VirtualizationFeatures"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstanceTemplatePostRequestV1Alpha5": {
      "type": "object",
      "title": "InstanceTemplate defines the specifications of VMs to be created during bulk VM creation.",
      "required": [
        "template_name",
        "type",
        "ssh_public_key"
      ],
      "properties": {
        "disks": {
          "description": "Disks to create for all VMs created from this instance template.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiskTemplate"
          },
          "x-go-name": "Disks"
        },
        "ib_partition_id": {
          "description": "IB Partition to use for all VMs created from this instance template.\nShould only be provided for IB-enabled VM types.\nThis is location-specific and must be provided if location is provided.",
          "type": "string",
          "x-go-name": "IBPartition",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "image_name": {
          "description": "OS Image to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "Image",
          "example": "ubuntu:20.04"
        },
        "location": {
          "description": "Location to use for all VMs created from this instance template.\nIf provided, all location-specific resources must also be provided.",
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentral1-a"
        },
        "maintenance_policy": {
          "description": "THe Host Maintenance Policy to use.",
          "type": "string",
          "x-go-name": "MaintenancePolicy",
          "example": "stop-vm"
        },
        "placement_policy": {
          "description": "The VM Placement Policy to use.",
          "type": "string",
          "x-go-name": "PlacementPolicy",
          "example": "spread"
        },
        "public_ip_address_type": {
          "description": "Public IP address type to use for all VMs created from this instance template. Must either be \"static\" or \"dynamic\".",
          "type": "string",
          "x-go-name": "PublicIPAddressType",
          "example": "static"
        },
        "reservation_id": {
          "type": "string",
          "x-go-name": "ReservationID",
          "example": "804bf3a2-81f2-4d78-9a9e-dc6a55ed33d8"
        },
        "shutdown_script": {
          "description": "Shutdown script to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "ShutdownScript",
          "example": "\"#!/bin/bash\\necho'goodbye'\""
        },
        "ssh_public_key": {
          "description": "SSH public key to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "SSHPublicKey",
          "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCspdG97nTS/h4PEPq2QD2RYVK1jxFXLFZuSDMI8Rtxpucl6LDZLOghEYoj13lxKQnGtcsM3Iu68lh+4YgZe7CbI6cc/TxPbeAX2HJTqDh0J7+GAlLBHK9tsepC0QlhIDiazJptOPDZ3cesCBXdxSnzEbhDaqgYOfl393cp1fCeOKRIDWEP3H9CM25dCbWF66sTDziLsojJ9dMnxhgKm9/JkZc5gYncLT/2Ey+VWfV9Fs65mGUrBbQOn3c8S/nEk6WRcYn4PFOnIp0Mz+Chb50iCJrW677pllLnkTGSU+4c0H9J5z4HDG0I+91RoiQ0QsayFTYO1JtSn+THLuq98V+D"
        },
        "startup_script": {
          "description": "Startup script to use for all VMs created from this instance template.",
          "type": "string",
          "x-go-name": "StartupScript",
          "example": "\"#!/bin/bash\\necho'hello'\""
        },
        "subnet_id": {
          "description": "Subnet to use for all VMs created from this instance template.\nThis is location-specific and must be provided if location is provided.",
          "type": "string",
          "x-go-name": "Subnet",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "template_name": {
          "description": "Name of the instance template. (This is not the name of the VMs created from this instance template.)",
          "type": "string",
          "x-go-name": "TemplateName",
          "example": "my-instance-template"
        },
        "type": {
          "description": "Product name of the VM type we want to create from this instance template.",
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        },
        "virtualization_features": {
          "$ref": "#/definitions/VirtualizationFeatures"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstanceV1Alpha5": {
      "description": "InstanceV1Alpha5 contains identifying information about a vm instance for\nvms.instances endpoints.",
      "type": "object",
      "required": [
        "id",
        "project_id",
        "type",
        "state",
        "created_at",
        "updated_at",
        "name",
        "location",
        "disks",
        "network_interfaces",
        "host_channel_adapters",
        "maintenance_policy"
      ],
      "properties": {
        "commitment_end": {
          "type": "string",
          "x-go-name": "CommitmentEnd"
        },
        "commitment_period": {
          "description": "commitment is no longer supported",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CommitmentPeriod"
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachedDiskV1Alpha5"
          },
          "x-go-name": "Disks"
        },
        "host_channel_adapters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostChannelAdapter"
          },
          "x-go-name": "HostChannelAdapters"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "ca39e669-47ee-456b-968d-303234fbf99f"
        },
        "instance_group_id": {
          "type": "string",
          "x-go-name": "InstanceGroupID",
          "example": "707749bd-ecad-4de8-aa00-1ae2fdb99e19"
        },
        "instance_template_id": {
          "type": "string",
          "x-go-name": "InstanceTemplateID",
          "example": "75c6712a-8da8-463c-a72d-fc65cf922959"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-centralnorth1-a"
        },
        "maintenance_policy": {
          "type": "string",
          "enum": [
            "stop-vm",
            "unspecified"
          ],
          "x-go-name": "MaintenancePolicy"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-first-vm"
        },
        "network_interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "x-go-name": "NetworkInterfaces"
        },
        "pod_id": {
          "type": "string",
          "x-go-name": "PodID",
          "example": "29d20dc4-90ad-4365-ab05-83f5f5e52d94"
        },
        "project_id": {
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "reservation_id": {
          "type": "string",
          "x-go-name": "ReservationID",
          "example": "804bf3a2-81f2-4d78-9a9e-dc6a55ed33d8"
        },
        "state": {
          "type": "string",
          "x-go-name": "State",
          "example": "RUNNING"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        },
        "updated_at": {
          "type": "string",
          "x-go-name": "UpdatedAt",
          "example": "2023-08-14T09:00:35Z"
        },
        "virtualization_features": {
          "$ref": "#/definitions/VirtualizationFeatures"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstancesAttachDiskPostRequestV1Alpha5": {
      "description": "InstancesAttachDiskPostRequestV1Alpha5 is the request type for POST requests to the\nvms.instances.attach-disk endpoint.",
      "type": "object",
      "required": [
        "attach_disks"
      ],
      "properties": {
        "attach_disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiskAttachment"
          },
          "x-go-name": "AttachDisks",
          "example": "[{disk_id: \"09ae8411-0fbb-411c-898c-2b8f19622ae1\", mode: \"read-write\", attachment_type: \"data\"}, {disk_id: \"b1f86d1b-42d2-490d-adb0-cc1029abf653\", mode: \"read-only\", attachment_type: \"data\"}]"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstancesDetachDiskPostRequest": {
      "description": "InstancesDetachDiskPostRequest is the request type for POST requests to the\nvms.instances.detach-disk endpoint.",
      "type": "object",
      "required": [
        "detach_disks"
      ],
      "properties": {
        "detach_disks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DetachDisks",
          "example": [
            "09ae8411-0fbb-411c-898c-2b8f19622ae1",
            "123e4567-e89b-12d3-a456-426614174000"
          ]
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstancesPatchRequestV1Alpha5": {
      "type": "object",
      "title": "InstancesPatchRequestV1Alpha5 is the request type for PATCH requests to the vms.instances endpoint.",
      "required": [
        "action"
      ],
      "properties": {
        "action": {
          "description": "The action to perform on the VM. REESRVE and UNRESERVE operations are done synchronously,\nand so will have succeeded with a 200 response.",
          "type": "string",
          "enum": [
            "START",
            "STOP",
            "RESET",
            "RESERVE",
            "UNRESERVE",
            "UPDATE"
          ],
          "x-go-name": "Action",
          "example": "START"
        },
        "commitment_period": {
          "description": "CommitmentPeriod is deprecated, please use reservationID instead",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CommitmentPeriod"
        },
        "host_channel_adapters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartialHostChannelAdapter"
          },
          "x-go-name": "HostChannelAdapters"
        },
        "maintenance_policy": {
          "description": "The host maintenance policy to use.",
          "type": "string",
          "x-go-name": "MaintenancePolicy",
          "example": "stop-vm"
        },
        "network_interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "x-go-name": "NetworkInterfaces"
        },
        "reservation_id": {
          "type": "string",
          "x-go-name": "ReservationID",
          "example": "804bf3a2-81f2-4d78-9a9e-dc6a55ed33d8"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "InstancesPostRequestV1Alpha5": {
      "description": "InstancesPostRequestV1Alpha5 is the request type for POST requests to the\nvms.instances endpoint.",
      "type": "object",
      "required": [
        "type",
        "ssh_public_key",
        "name",
        "location"
      ],
      "properties": {
        "commitment_period": {
          "description": "commitment is no longer supported",
          "type": "integer",
          "format": "int64",
          "x-go-name": "CommitmentPeriod"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiskAttachment"
          },
          "x-go-name": "Disks",
          "example": "[{disk_id: \"09ae8411-0fbb-411c-898c-2b8f19622ae1\", mode: \"read-write\", attach_type: \"data\"},"
        },
        "host_channel_adapters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartialHostChannelAdapter"
          },
          "x-go-name": "HostChannelAdapters"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image",
          "example": "ubuntu:20.04"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentral1-a"
        },
        "maintenance_policy": {
          "description": "The Host Maintenance Policy to use.",
          "type": "string",
          "x-go-name": "MaintenancePolicy",
          "example": "stop-vm"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-first-vm"
        },
        "network_interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "x-go-name": "NetworkInterfaces"
        },
        "reservation_specification": {
          "$ref": "#/definitions/ReservationSpecification"
        },
        "shutdown_script": {
          "type": "string",
          "x-go-name": "ShutdownScript",
          "example": "#!/bin/bash\\necho'goodbye'"
        },
        "ssh_public_key": {
          "type": "string",
          "x-go-name": "SSHPublicKey",
          "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCspdG97nTS/h4PEPq2QD2RYVK1jxFXLFZuSDMI8Rtxpucl6LDZLOghEYoj13lxKQnGtcsM3Iu68lh+4YgZe7CbI6cc/TxPbeAX2HJTqDh0J7+GAlLBHK9tsepC0QlhIDiazJptOPDZ3cesCBXdxSnzEbhDaqgYOfl393cp1fCeOKRIDWEP3H9CM25dCbWF66sTDziLsojJ9dMnxhgKm9/JkZc5gYncLT/2Ey+VWfV9Fs65mGUrBbQOn3c8S/nEk6WRcYn4PFOnIp0Mz+Chb50iCJrW677pllLnkTGSU+4c0H9J5z4HDG0I+91RoiQ0QsayFTYO1JtSn+THLuq98V+D"
        },
        "startup_script": {
          "type": "string",
          "x-go-name": "StartupScript",
          "example": "#!/bin/bash\\necho'hello'"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        },
        "virtualization_features": {
          "$ref": "#/definitions/VirtualizationFeatures"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "KubernetesAuthenticationClientCertificateDetails": {
      "description": "KubernetesAuthenticationClientCertificateDetails contains information to authenticate\nto a Kubernetes cluster with client certificates.",
      "type": "object",
      "required": [
        "cluster_name",
        "cluster_address",
        "cluster_ca_certificate",
        "user_name",
        "user_client_certificate",
        "user_client_key"
      ],
      "properties": {
        "cluster_address": {
          "description": "Address of the Kubernetes cluster to authenticate to",
          "type": "string",
          "x-go-name": "ClusterAddress"
        },
        "cluster_ca_certificate": {
          "description": "CA Certificate of the Kubernetes cluster to authenticate to",
          "type": "string",
          "x-go-name": "ClusterCACert"
        },
        "cluster_name": {
          "description": "Name of the Kubernetes cluster to authenticate to",
          "type": "string",
          "x-go-name": "ClusterName"
        },
        "user_client_certificate": {
          "description": "User's Client certificate for authenticating to the cluster.",
          "type": "string",
          "x-go-name": "UserClientCert"
        },
        "user_client_key": {
          "description": "The private key associated with the user's Client certificate.",
          "type": "string",
          "x-go-name": "UserClientKey"
        },
        "user_name": {
          "description": "Name of the authenticating user",
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "KubernetesCluster": {
      "type": "object",
      "title": "KubernetesCluster defines the specifications of the Kubernetes cluster.",
      "required": [
        "id",
        "name",
        "location",
        "version",
        "configuration",
        "subnet_id",
        "project_id",
        "node_pools",
        "add_ons",
        "state",
        "dns_name"
      ],
      "properties": {
        "add_ons": {
          "description": "List of add-ons associated with the cluster.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AddOns",
          "example": [
            "crusoe_csi"
          ]
        },
        "cluster_cidr": {
          "description": "defines: the range of IP Addresses allocated to pods scheduled on worker nodes",
          "type": "string",
          "x-go-name": "ClusterCIDR",
          "example": "10.233.0.0/18"
        },
        "configuration": {
          "description": "Configuration setting of the Kubernetes cluster.",
          "type": "string",
          "enum": [
            "ha"
          ],
          "x-go-name": "Configuration",
          "example": "ha"
        },
        "dns_name": {
          "description": "DNS name of the cluster",
          "type": "string",
          "x-go-name": "DNSName",
          "example": "my-kubernetes-cluster.crusoecloudcompute.com"
        },
        "id": {
          "description": "ID of the Kubernetes cluster.",
          "type": "string",
          "x-go-name": "ID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "location": {
          "description": "Location of the Kubernetes cluster.",
          "type": "string",
          "x-go-name": "Location"
        },
        "name": {
          "description": "Name of the Kubernetes cluster.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-kubernetes-cluster"
        },
        "node_cidr_mask_size": {
          "description": "defines: the mask size for cluster cidr",
          "type": "integer",
          "format": "int32",
          "x-go-name": "NodeCIDRMask",
          "example": 24
        },
        "node_pools": {
          "description": "List of IDs of node pools within the Kubernetes cluster.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NodePools",
          "example": [
            "1d2b3a4c-5e6f-7b9d-8c9a-0e1f2d3b4c5d"
          ]
        },
        "project_id": {
          "description": "The ID of the project this Kubernetes cluster belongs to.",
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "9c8b7d6e-5f4a-3b2c-1e0f-2a3b4c5d6e7f"
        },
        "service_cluster_ip_range": {
          "description": "defines: the range of IP Addresses allocated to K8s services",
          "type": "string",
          "x-go-name": "ServiceClusterCIDR",
          "example": "10.233.0.0/18"
        },
        "state": {
          "description": "State of the cluster",
          "type": "string",
          "x-go-name": "State",
          "example": "STATE_RUNNING"
        },
        "subnet_id": {
          "description": "The ID of the subnet this Kubernetes cluster belongs to.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "version": {
          "description": "Version of the crusoe Kubernetes image of the Kubernetes cluster.",
          "type": "string",
          "x-go-name": "Version",
          "example": "1.29.5-crusoe.0"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "KubernetesClusterPatchRequest": {
      "type": "object",
      "title": "KubernetesClusterPatchRequest defines the specifications of the cluster to be updated.",
      "required": [
        "configuration"
      ],
      "properties": {
        "add_ons": {
          "description": "List of add-ons to be included to the cluster.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AddOns",
          "example": [
            "crusoe_csi"
          ]
        },
        "configuration": {
          "description": "Configuration setting of the Kubernetes cluster.\nCan only upgrade cluster to HA, but not downgrade from HA to normal",
          "type": "string",
          "enum": [
            "ha"
          ],
          "x-go-name": "Configuration",
          "example": "ha"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "KubernetesClusterPostRequest": {
      "type": "object",
      "title": "KubernetesClusterPostRequest defines the specifications of the cluster to be created.",
      "required": [
        "name",
        "location",
        "version"
      ],
      "properties": {
        "add_ons": {
          "description": "List of add-ons to be included to the cluster.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AddOns",
          "example": [
            "crusoe_csi",
            "nvidia_gpu_operator",
            "nvidia_network_operator"
          ]
        },
        "cluster_cidr": {
          "description": "defines: the range of IP Addresses allocated to pods scheduled on worker nodes",
          "type": "string",
          "x-go-name": "ClusterCIDR",
          "example": "10.233.0.0/18"
        },
        "configuration": {
          "description": "Configuration setting of the Kubernetes cluster. Leave the field empty for standard configuration.",
          "type": "string",
          "enum": [
            "ha"
          ],
          "x-go-name": "Configuration",
          "example": "ha"
        },
        "location": {
          "description": "Location to create the Kubernetes cluster in.",
          "type": "string",
          "x-go-name": "Location"
        },
        "name": {
          "description": "Name of the Kubernetes cluster.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-kubernetes-cluster"
        },
        "node_cidr_mask_size": {
          "description": "defines: the mask size for cluster cidr",
          "type": "integer",
          "format": "int32",
          "x-go-name": "NodeCIDRMask",
          "example": 24
        },
        "service_cluster_ip_range": {
          "description": "defines: the range of IP Addresses allocated to K8s services",
          "type": "string",
          "x-go-name": "ServiceClusterCIDR",
          "example": "10.233.0.0/18"
        },
        "subnet_id": {
          "description": "The ID of the subnet to create the cluster in. Must be in the location\nspecified. If not provided, the default subnet for the location will be\nused, if there is one.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "version": {
          "description": "Version of the Crusoe Kubernetes image to create the cluster with.",
          "type": "string",
          "x-go-name": "Version",
          "example": "1.29.5-crusoe.0"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "KubernetesNodePool": {
      "type": "object",
      "required": [
        "id",
        "name",
        "count",
        "project_id",
        "cluster_id",
        "image_id",
        "node_labels",
        "subnet_id",
        "instance_ids",
        "state",
        "type"
      ],
      "properties": {
        "cluster_id": {
          "description": "The ID of the Kubernetes cluster this node pool belongs to.",
          "type": "string",
          "x-go-name": "ClusterID",
          "example": "9c8b7d6e-5f4a-3b2c-1e0f-2a3b4c5d6e7f"
        },
        "count": {
          "description": "Number of nodes within the node pool.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 4
        },
        "id": {
          "description": "ID of the node pool.",
          "type": "string",
          "x-go-name": "ID",
          "example": "0a1b3c2d-5e6f-8b9c-4d7e-1a2b3c4d5e6f"
        },
        "image_id": {
          "description": "Image Unique identifier for the Kubernetes node pool.",
          "type": "string",
          "x-go-name": "ImageID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "instance_ids": {
          "description": "List of IDs of instances within the node pool.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InstanceIDs",
          "example": [
            "ca39e669-47ee-456b-968d-303234fbf99f"
          ]
        },
        "name": {
          "description": "Name of the node pool.",
          "type": "string",
          "x-go-name": "Name",
          "example": "crusoe-node-pool"
        },
        "node_labels": {
          "description": "Labels associated with the node pool.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "NodeLabels",
          "example": "\"nvidia.a100\""
        },
        "project_id": {
          "description": "The ID of the project this Kubernetes node pool belongs to.",
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "9c8b7d6e-5f4a-3b2c-1e0f-2a3b4c5d6e7f"
        },
        "state": {
          "description": "State of the node pool",
          "type": "string",
          "x-go-name": "State",
          "example": "STATE_RUNNING"
        },
        "subnet_id": {
          "description": "The ID of the subnet this node pool belongs to.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "type": {
          "description": "VM type of the node pool",
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "KubernetesNodePoolPatchRequest": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "description": "The number of nodes to be created.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 4
        },
        "node_labels": {
          "description": "Labels assigned to the node pool",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "NodeLabels",
          "example": {
            "label": "my_node"
          }
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "KubernetesNodePoolPostRequest": {
      "type": "object",
      "required": [
        "name",
        "product_name",
        "count",
        "cluster_id"
      ],
      "properties": {
        "cluster_id": {
          "description": "Cluster ID of the cluster this node pool belongs to.",
          "type": "string",
          "x-go-name": "ClusterID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "count": {
          "description": "The number of nodes to be created.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 4
        },
        "ib_partition_id": {
          "description": "The ID of the Infiniband partition to create node pool in. Must be in the location\nof the cluster if specified.",
          "type": "string",
          "x-go-name": "IBPartitionID",
          "example": "b1f86d1b-42d2-490d-adb0-cc1029abf653"
        },
        "name": {
          "description": "Name of the Kubernetes node pool.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-kubernetes-node-pool"
        },
        "node_labels": {
          "description": "Labels assigned to the node pool",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "NodeLabels",
          "example": {
            "label": "my_node"
          }
        },
        "product_name": {
          "description": "Product name of the VM type to be created within this node pool.",
          "type": "string",
          "x-go-name": "ProductName",
          "example": "a100.2x"
        },
        "ssh_public_key": {
          "description": "SSH public key to use for all VMs created from this node pool.",
          "type": "string",
          "x-go-name": "SSHPublicKey",
          "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCspdG97nTS/h4PEPq2QD2RYVK1jxFXLFZuSDMI8Rtxpucl6LDZLOghEYoj13lxKQnGtcsM3Iu68lh+4YgZe7CbI6cc/TxPbeAX2HJTqDh0J7+GAlLBHK9tsepC0QlhIDiazJptOPDZ3cesCBXdxSnzEbhDaqgYOfl393cp1fCeOKRIDWEP3H9CM25dCbWF66sTDziLsojJ9dMnxhgKm9/JkZc5gYncLT/2Ey+VWfV9Fs65mGUrBbQOn3c8S/nEk6WRcYn4PFOnIp0Mz+Chb50iCJrW677pllLnkTGSU+4c0H9J5z4HDG0I+91RoiQ0QsayFTYO1JtSn+THLuq98V+D"
        },
        "subnet_id": {
          "description": "The ID of the subnet to create the node pool in. Must be in the location\nof the cluster if specified. If not provided, the default subnet for the\nlocation will be used, if there is one.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListCapacitiesResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapacityV1Alpha5"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListDiskSnapshotsResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiskSnapshot"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListDisksResponseV1Alpha5": {
      "type": "object",
      "title": "ListDisksResponseV1Alpha5 is the response type for GET requests to the disks endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiskV1Alpha5"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListEntitiesResponseV1Alpha5": {
      "type": "object",
      "title": "ListEntitiesResponseV1Alpha5 is the response type for GET requests to the entities endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entity"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListIBNetworksResponseV1Alpha5": {
      "type": "object",
      "title": "ListIBNetworksResponseV1Alpha5 is the response type for GET requests to the IB Networks endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IBNetwork"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListIBPartitionsResponseV1Alpha5": {
      "type": "object",
      "title": "ListIBPartitionsResponseV1Alpha5 is the response type for GET requests to the IB Partitions endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IBPartition"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListImagesResponseV1Alpha5": {
      "type": "object",
      "title": "ListImagesResponseV1Alpha5 is the resource response type for GET requests to the Images endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListInferenceAPIKeysResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InferenceAPIKeyInfo"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListInstanceGroupsResponse": {
      "description": "ListInstanceGroupsResponse is the resource response type for GET\nrequests to the InstanceGroup endpoint.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceGroup"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListInstanceTemplatesResponseV1Alpha5": {
      "description": "ListInstanceTemplatesResponseV1Alpha5 is the resource response type for GET\nrequests to the InstanceTemplates endpoint.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceTemplate"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListInstancesResponseV1Alpha5": {
      "type": "object",
      "title": "ListInstancesResponseV1Alpha5 is the response type for GET requests to /compute/vms/instances.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceV1Alpha5"
          },
          "x-go-name": "Items"
        },
        "next_page_token": {
          "description": "Base64 encoded token representing the next page of instances.\nEmpty if currently on the last page.",
          "type": "string",
          "x-go-name": "NextPageToken",
          "example": "bXktbGFzdC12bQ"
        },
        "prev_page_token": {
          "description": "Base64 encoded token representing the previous page of instances.\nEmpty if currently on the first page.",
          "type": "string",
          "x-go-name": "PrevPageToken",
          "example": "bXktZmlyc3Qtdm0"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListKubernetesClustersResponse": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KubernetesCluster"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListKubernetesNodePoolsResponse": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KubernetesNodePool"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListLoadBalancersResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancer"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListLocationsResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Items",
          "example": [
            "us-northcentral1-a"
          ]
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListMTCNodePoolsResponse": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTCNodePool"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListOperationsResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListProjectQuotasResponse": {
      "type": "object",
      "title": "ListProjectQuotasResponse is the response for listing a project's quotas.",
      "properties": {
        "quotas": {
          "description": "Quotas are all returned project quotas",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Quota"
          },
          "x-go-name": "Quotas"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListProjectsResponseV1Alpha5": {
      "type": "object",
      "title": "ListProjectsResponseV1Alpha5 is the response type for GET requests to the roles endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListSSHKeysResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SSHKey"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListTokensResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenInfo"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListTrainingClustersResponse": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MTCCluster"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListTypesResponseV1Alpha5": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Type"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListVPCFirewallRulesResponseV1Alpha5": {
      "type": "object",
      "title": "ListVPCFirewallRulesResponseV1Alpha5 is the response type for GET requests to the VPC Firewall Rules endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VPCFirewallRule"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListVPCNetworksResponseV1Alpha5": {
      "type": "object",
      "title": "ListVPCNetworksResponseV1Alpha5 is the response type for GET requests to the VPC Networks endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VPCNetwork"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ListVPCSubnetsResponseV1Alpha5": {
      "type": "object",
      "title": "ListVPCSubnetsResponseV1Alpha5 is the response type for GET requests to the VPC Subnets endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VPCSubnet"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "LoadBalancer": {
      "type": "object",
      "required": [
        "id",
        "name",
        "network_interfaces",
        "destinations",
        "location",
        "protocols",
        "algorithm",
        "ips"
      ],
      "properties": {
        "algorithm": {
          "type": "string",
          "x-go-name": "Algorithm",
          "example": "random"
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkTarget"
          },
          "x-go-name": "Destinations"
        },
        "health_check": {
          "$ref": "#/definitions/HealthCheckOptions"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        },
        "ips": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAddresses"
          },
          "x-go-name": "IPs"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentraleast1-a"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-subnet"
        },
        "network_interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancerNetworkInterface"
          },
          "x-go-name": "NetworkInterfaces"
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Protocols",
          "example": "[tcp]"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "internal_ipv4,"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "LoadBalancerNetworkInterface": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string",
          "x-go-name": "Network",
          "example": "dbaafd53-96ea-4754-9cce-78e7f08ac151"
        },
        "subnet": {
          "type": "string",
          "x-go-name": "Subnet",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "LoadBalancersPatchRequestV1Alpha5": {
      "type": "object",
      "properties": {
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkTarget"
          },
          "x-go-name": "Destinations"
        },
        "health_check": {
          "$ref": "#/definitions/HealthCheckOptions"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-load-balancer"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "LoadBalancersPostRequest": {
      "type": "object",
      "required": [
        "name",
        "destinations",
        "location",
        "protocols",
        "network_interfaces",
        "algorithm"
      ],
      "properties": {
        "algorithm": {
          "type": "string",
          "x-go-name": "Algorithm",
          "example": "random"
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NetworkTarget"
          },
          "x-go-name": "Destinations"
        },
        "health_check": {
          "$ref": "#/definitions/HealthCheckOptions"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentraleast1-a"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-load-balancer"
        },
        "network_interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadBalancerNetworkInterface"
          },
          "x-go-name": "NetworkInterfaces"
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Protocols",
          "example": "[tcp]"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "internal_ipv4"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "LogEntry": {
      "type": "object",
      "title": "Log Entry models the audit log entry.",
      "required": [
        "action",
        "actor_id",
        "actor_email",
        "actor_type",
        "client_ip",
        "end_time",
        "result",
        "start_time",
        "surface"
      ],
      "properties": {
        "action": {
          "description": "Name of the action",
          "type": "string",
          "x-go-name": "Action",
          "example": "Create"
        },
        "action_detail": {
          "description": "Name of the action",
          "type": "string",
          "x-go-name": "ActionDetail",
          "example": "Attach Disk"
        },
        "actor_email": {
          "description": "ActorEmail: the email address of the actor",
          "type": "string",
          "x-go-name": "ActorEmail",
          "example": "xxxx@gmail.coom"
        },
        "actor_id": {
          "description": "Actor: who performed the action.",
          "type": "string",
          "x-go-name": "Actor",
          "example": "e384a1de-81f8-4cb2-b312-a7d88a9bf9cb || \"system\""
        },
        "actor_type": {
          "description": "ActorType: type of the actor",
          "type": "string",
          "x-go-name": "ActorType",
          "example": "user || admin || system"
        },
        "client_ip": {
          "description": "IP address of the request",
          "type": "string",
          "x-go-name": "ClientIP",
          "example": "10.2.5.355"
        },
        "end_time": {
          "description": "The end time of the request",
          "type": "string",
          "x-go-name": "EndTime",
          "example": "\"2024-08-24T05:25:33.860Z\""
        },
        "error_message": {
          "description": "The error message of the request",
          "type": "string",
          "x-go-name": "ErrorMsg",
          "example": "\"The requested resource is out of stock. Please try again later.\""
        },
        "locations": {
          "description": "Region name of where the action is performed if applicable",
          "type": "string",
          "x-go-name": "Location",
          "example": "us-east1"
        },
        "organization_id": {
          "description": "organization id",
          "type": "string",
          "x-go-name": "OrganizationID",
          "example": "d10efcc0-7dba-4163-a3f0-f48aae20712a"
        },
        "organization_name": {
          "description": "organization name",
          "type": "string",
          "x-go-name": "OrganizationName",
          "example": "crusoe.ai"
        },
        "project_id": {
          "description": "Project ID",
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "e384a1de-81f8-4cb2-b312-a7d88a9bf9cb"
        },
        "project_name": {
          "description": "Project Name",
          "type": "string",
          "x-go-name": "ProjectName",
          "example": "e384a1de-81f8-4cb2-b312-a7d88a9bf9cb"
        },
        "result": {
          "description": "The result of the action",
          "type": "string",
          "x-go-name": "Result",
          "example": "OK"
        },
        "start_time": {
          "description": "The start time of the request",
          "type": "string",
          "x-go-name": "StartTime",
          "example": "\"2024-08-24T05:25:30.954Z\""
        },
        "surface": {
          "description": "Surface type of the request",
          "type": "string",
          "x-go-name": "Surface",
          "example": "browser"
        },
        "target_ids": {
          "description": "The targets of the action\nrequired",
          "type": "string",
          "x-go-name": "Target",
          "example": "e384a1de-81f8-4cb2-b312-a7d88a9bf9cb,6ac4d027-ee2a-4c0c-9b6f-e8638a7ae867"
        },
        "target_names": {
          "description": "The target names of the action",
          "type": "string",
          "x-go-name": "TargetName",
          "example": "vm-test-1,vm-test-2"
        },
        "target_type": {
          "description": "The target type of the action\nrequired",
          "type": "string",
          "x-go-name": "TargetType",
          "example": "VM"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers/logservice"
    },
    "MFAMethod": {
      "type": "string",
      "title": "Enum of all valid MFA methods.",
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "MTCCluster": {
      "type": "object",
      "title": "MTCCluster defines the specifications of the slurm cluster.",
      "required": [
        "id",
        "name",
        "location",
        "subnet_id",
        "project_id",
        "orchestrator_version",
        "orchestrator",
        "state",
        "node_pools"
      ],
      "properties": {
        "id": {
          "description": "ID of the slurm cluster.",
          "type": "string",
          "x-go-name": "ID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "location": {
          "description": "Location of the slurm cluster.",
          "type": "string",
          "x-go-name": "Location"
        },
        "name": {
          "description": "Name of the slurm cluster.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-slurm-cluster"
        },
        "node_pools": {
          "description": "Nodepools associated with the cluster.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "NodePools",
          "example": [
            "09ae8411-0fbb-411c-898c-2b8f19622ae1"
          ]
        },
        "orchestrator": {
          "description": "Orchestrator of the cluster.",
          "type": "string",
          "x-go-name": "Orchestrator",
          "example": "slurm"
        },
        "orchestrator_version": {
          "description": "Orchestrator version of the cluster.",
          "type": "string",
          "x-go-name": "OrchestratorVersion",
          "example": "22.05.8"
        },
        "project_id": {
          "description": "The ID of the project this slurm cluster belongs to.",
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "9c8b7d6e-5f4a-3b2c-1e0f-2a3b4c5d6e7f"
        },
        "state": {
          "description": "State of the cluster",
          "type": "string",
          "x-go-name": "State",
          "example": "RUNNING"
        },
        "subnet_id": {
          "description": "The ID of the subnet this slurm cluster belongs to.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "MTCClusterPostRequest": {
      "type": "object",
      "title": "MTCClusterPostRequest defines the specifications of the cluster to be created.",
      "required": [
        "name",
        "location",
        "user_list"
      ],
      "properties": {
        "location": {
          "description": "Location to create the slurm cluster in.",
          "type": "string",
          "x-go-name": "Location"
        },
        "name": {
          "description": "Name of the slurm cluster.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-slurm-cluster"
        },
        "subnet_id": {
          "description": "The ID of the subnet to create the cluster in. Must be in the location\nspecified. If not provided, the default subnet for the location will be\nused, if there is one.",
          "type": "string",
          "x-go-name": "SubnetID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "user_list": {
          "description": "A mapping of usernames to their SSH keys for accessing the cluster.\nBoth the username and ssh key must be named attributes, as shown in the example below",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "UserSSHKeys",
          "example": {
            "username1": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCspdG97nTS/h4PEPq2QD2RYVK1jxFXLFZuSDMI8Rtxpucl6LDZLOghEYoj13lxKQnGtcsM3Iu68lh+4YgZe7CbI6cc/TxPbeAX2HJTqDh0J7+GAlLBHK9tsepC0QlhIDiazJptOPDZ3cesCBXdxSnzEbhDaqgYOfl393cp1fCeOKRIDWEP3H9CM25dCbWF66sTDziLsojJ9dMnxhgKm9/JkZc5gYncLT/2Ey+VWfV9Fs65mGUrBbQOn3c8S/nEk6WRcYn4PFOnIp0Mz+Chb50iCJrW677pllLnkTGSU+4c0H9J5z4HDG0I+91RoiQ0QsayFTYO1JtSn+THLuq98V+D"
          }
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "MTCNodePool": {
      "type": "object",
      "required": [
        "id",
        "name",
        "type",
        "running_count",
        "desired_count",
        "ib_partition_id",
        "project_id",
        "cluster_id",
        "image_id",
        "instance_ids",
        "partition_name"
      ],
      "properties": {
        "cluster_id": {
          "description": "The ID of the slurm cluster this node pool belongs to.",
          "type": "string",
          "x-go-name": "ClusterID",
          "example": "9c8b7d6e-5f4a-3b2c-1e0f-2a3b4c5d6e7f"
        },
        "desired_count": {
          "description": "Desired number of nodes within the node pool.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DesiredCount",
          "example": 4
        },
        "ib_partition_id": {
          "description": "IB Partition ID of the node pool.",
          "type": "string",
          "x-go-name": "IBPartitionID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "id": {
          "description": "ID of the node pool.",
          "type": "string",
          "x-go-name": "ID",
          "example": "0a1b3c2d-5e6f-8b9c-4d7e-1a2b3c4d5e6f"
        },
        "image_id": {
          "description": "Image ID for the slurm node pool.",
          "type": "string",
          "x-go-name": "ImageID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "instance_ids": {
          "description": "List of IDs of instances within the node pool.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InstanceIDs",
          "example": [
            "ca39e669-47ee-456b-968d-303234fbf99f"
          ]
        },
        "name": {
          "description": "Name of the node pool.",
          "type": "string",
          "x-go-name": "Name",
          "example": "crusoe-node-pool"
        },
        "partition_name": {
          "description": "Slurm partition name of the node pool.",
          "type": "string",
          "x-go-name": "SlurmPartitionName",
          "example": "my-slurm-partition"
        },
        "project_id": {
          "description": "The ID of the project this slurm node pool belongs to.",
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "9c8b7d6e-5f4a-3b2c-1e0f-2a3b4c5d6e7f"
        },
        "running_count": {
          "description": "Number of nodes within the node pool.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "RunningCount",
          "example": 4
        },
        "type": {
          "description": "VM type of the node pool",
          "type": "string",
          "x-go-name": "Type",
          "example": "a100.2x"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "MTCNodePoolPatchRequest": {
      "type": "object",
      "required": [
        "desired_count"
      ],
      "properties": {
        "desired_count": {
          "description": "The desired number of nodes to be created.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DesiredCount",
          "example": 4
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "MTCNodePoolPostRequest": {
      "type": "object",
      "required": [
        "name",
        "product_name",
        "desired_count",
        "cluster_id",
        "partition_name"
      ],
      "properties": {
        "cluster_id": {
          "description": "Cluster ID of the cluster this node pool belongs to.",
          "type": "string",
          "x-go-name": "ClusterID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "desired_count": {
          "description": "The desired number of nodes to be created.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "DesiredCount",
          "example": 4
        },
        "ib_partition_id": {
          "description": "The ID of the Infiniband partition to create node pool in. Must be in the location\nof the cluster if specified.",
          "type": "string",
          "x-go-name": "IBPartitionID",
          "example": "b1f86d1b-42d2-490d-adb0-cc1029abf653"
        },
        "name": {
          "description": "Name of the slurm node pool.",
          "type": "string",
          "x-go-name": "Name",
          "example": "my-slurm-node-pool"
        },
        "partition_name": {
          "description": "Name of the slurm partition.",
          "type": "string",
          "x-go-name": "SlurmPartitionName",
          "example": "my-slurm-partition"
        },
        "product_name": {
          "description": "Product name of the VM type to be created within this node pool.",
          "type": "string",
          "x-go-name": "ProductName",
          "example": "a100.2x"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "NetworkInterface": {
      "type": "object",
      "required": [
        "id",
        "name",
        "network",
        "subnet",
        "interface_type",
        "mac_address",
        "ips"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "ca39e669-47ee-456b-968d-303234fbf99f"
        },
        "interface_type": {
          "type": "string",
          "x-go-name": "InterfaceType",
          "example": "ethernet"
        },
        "ips": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPAddresses"
          },
          "x-go-name": "IPs"
        },
        "mac_address": {
          "type": "string",
          "x-go-name": "MACAddress",
          "example": "00:00:5e:00:53:af"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "network-interface-1"
        },
        "network": {
          "type": "string",
          "x-go-name": "Network",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        },
        "subnet": {
          "type": "string",
          "x-go-name": "Subnet",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "NetworkTarget": {
      "type": "object",
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "CIDR",
          "example": "10.1.2.3/24"
        },
        "resource_id": {
          "type": "string",
          "x-go-name": "ResourceID",
          "example": "306aa10d-5570-4e47-88c9-46bf11bd8737"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Operation": {
      "description": "Individual resources that use Operations should populate the `metadata` field\nwith resource-specific information.",
      "type": "object",
      "title": "Operation contains the common fields for all Operation API objects.",
      "required": [
        "operation_id",
        "state",
        "metadata",
        "started_at",
        "completed_at"
      ],
      "properties": {
        "completed_at": {
          "type": "string",
          "x-go-name": "CompletedAt",
          "example": "2021-12-03T19:59:34Z"
        },
        "metadata": {
          "x-go-name": "Metadata",
          "example": "{}"
        },
        "operation_id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "F6EF489C-086E-458D-B812-7962964A28C9"
        },
        "result": {
          "x-go-name": "Result",
          "example": "{}"
        },
        "started_at": {
          "type": "string",
          "x-go-name": "StartedAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "state": {
          "type": "string",
          "enum": [
            "IN_PROGRESS",
            "SUCCEEDED",
            "FAILED"
          ],
          "x-go-name": "State",
          "example": "IN_PROGRESS"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "PartialHostChannelAdapter": {
      "type": "object",
      "title": "PartialHostChannelAdapter is used when POSTing and PATCHing VMs to assign IB Partitions.",
      "properties": {
        "ib_partition_id": {
          "type": "string",
          "x-go-name": "IBPartitionID"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "PostOrgMFARequest": {
      "type": "object",
      "required": [
        "mfa_method"
      ],
      "properties": {
        "mfa_method": {
          "type": "string",
          "x-go-name": "MFAMethod",
          "example": "totp"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "PrivateIPv4Address": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address",
          "example": "10.1.2.3"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Project": {
      "type": "object",
      "title": "Project contains identifying information for a project.",
      "required": [
        "id",
        "organization_id",
        "name",
        "relation",
        "resources"
      ],
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "Admin"
        },
        "organization_id": {
          "type": "string",
          "x-go-name": "OrganizationID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "relation": {
          "type": "string",
          "x-go-name": "Relation",
          "example": "owner"
        },
        "resources": {
          "$ref": "#/definitions/ProjectResources"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProjectResourceDetails": {
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 5
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProjectResources": {
      "type": "object",
      "title": "ProjectResources contains information about resources within a project.",
      "required": [
        "instances",
        "disks",
        "vpc_networks"
      ],
      "properties": {
        "disks": {
          "$ref": "#/definitions/ProjectResourceDetails"
        },
        "instances": {
          "$ref": "#/definitions/ProjectResourceDetails"
        },
        "vpc_networks": {
          "$ref": "#/definitions/ProjectResourceDetails"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProjectUsageResponse": {
      "type": "object",
      "required": [
        "resource_type",
        "project_id",
        "reservation_id",
        "region",
        "date",
        "quantity",
        "billable_metric"
      ],
      "properties": {
        "billable_metric": {
          "type": "string",
          "x-go-name": "Metric",
          "example": "\"gpu-hours\""
        },
        "date": {
          "type": "string",
          "x-go-name": "Date",
          "example": "\"2022-07-01\""
        },
        "project_id": {
          "type": "string",
          "x-go-name": "ProjectID",
          "example": "\"d8f58dfd-dd86-4ee4-8f01-643e6d0f15bb\""
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "x-go-name": "Quantity",
          "example": 2.123
        },
        "region": {
          "type": "string",
          "x-go-name": "Region",
          "example": "\"us-northcentral1\""
        },
        "reservation_id": {
          "type": "string",
          "x-go-name": "ReservationID",
          "example": "\"d8f58dfd-dd86-4ee4-8f01-643e6d0f15bb\""
        },
        "resource_type": {
          "type": "string",
          "x-go-name": "ResourceType",
          "example": "\"a40.1x\""
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProjectsPostRequest": {
      "type": "object",
      "title": "ProjectsPostRequest is the request type for POST requests to the projects endpoint.",
      "required": [
        "organization_id",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "Admin"
        },
        "organization_id": {
          "type": "string",
          "x-go-name": "OrganizationID",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProjectsPutPostResponseV1Alpha5": {
      "type": "object",
      "title": "ProjectsPutPostResponseV1Alpha5 is the response type for PUT and POST requests to the projects endpoint.",
      "required": [
        "project"
      ],
      "properties": {
        "project": {
          "$ref": "#/definitions/Project"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProjectsPutRequest": {
      "type": "object",
      "title": "ProjectsPutRequest is the request type for PUT requests to the projects endpoint.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "Crusoe Energy"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProspectPostRequest": {
      "type": "object",
      "title": "ProspectPostRequest is the request type for POST requests to the prospects endpoint.",
      "required": [
        "email",
        "name",
        "company",
        "source"
      ],
      "properties": {
        "company": {
          "type": "string",
          "x-go-name": "Company",
          "example": "crusoe"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email",
          "example": "john@crusoeenergy.com"
        },
        "expected_capacity": {
          "type": "string",
          "enum": [
            "<64 GPUs",
            "64-128 GPUs",
            "128-256 GPUs",
            "256+ GPUs"
          ],
          "x-go-name": "ExpectedCapacity",
          "example": "<64 GPUs"
        },
        "expected_commitment": {
          "type": "string",
          "enum": [
            "On-demand",
            "1 year",
            "2 year",
            "3 year"
          ],
          "x-go-name": "ExpectedCommitment",
          "example": "1 year"
        },
        "expected_service": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ExpectedService",
          "example": "[Nvidia H100, Nvidia L40S]"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "john"
        },
        "referral": {
          "type": "string",
          "x-go-name": "Referral",
          "example": "marketing event"
        },
        "source": {
          "type": "string",
          "x-go-name": "Source",
          "example": "portal"
        },
        "use_case": {
          "type": "string",
          "x-go-name": "UseCase",
          "example": "training model to minimize energy usage"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ProspectPostResponse": {
      "type": "object",
      "title": "ProspectPostResponse is the response type for POST requests to the prospects endpoint.",
      "properties": {
        "approve_customer_success": {
          "type": "boolean",
          "x-go-name": "ApproveCustomerSuccess",
          "example": true
        },
        "create_customer_success": {
          "type": "boolean",
          "x-go-name": "CreateCustomerSuccess",
          "example": true
        },
        "success": {
          "description": "Success is deprecated",
          "type": "boolean",
          "x-go-name": "Success",
          "example": true
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "PublicIPv4Address": {
      "type": "object",
      "required": [
        "address",
        "id",
        "type"
      ],
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address",
          "example": "121.0.0.0"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type",
          "example": "dynamic"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Quota": {
      "type": "object",
      "properties": {
        "available": {
          "description": "Used is the remaining quota available",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Available",
          "example": 6
        },
        "max": {
          "description": "Max is the maximum quota allowed for the resource in the project",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Max",
          "example": 10
        },
        "type": {
          "description": "Type is the enum quota type",
          "type": "string",
          "x-go-name": "Type",
          "example": "PROJECT_QUOTA_TYPE_MAXIMUM_VM_SLICES_VCPU_6_MEM_60_A40_PCIE_48GB_1"
        },
        "used": {
          "description": "Used is the current quota consumed by the project",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Used",
          "example": 4
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Reservation": {
      "type": "object",
      "title": "Reservation contains information about a customer reservation.",
      "required": [
        "id",
        "reservation_type",
        "product_line",
        "duration",
        "quantity",
        "used_quantity",
        "locations",
        "projects",
        "contract_start_date",
        "contract_end_date",
        "delivery_deadline",
        "date_delivered",
        "vm_ids",
        "price"
      ],
      "properties": {
        "contract_end_date": {
          "type": "string",
          "x-go-name": "ContractEndDate",
          "example": "2025-08-14T09:00:35Z"
        },
        "contract_start_date": {
          "type": "string",
          "x-go-name": "ContractStartDate",
          "example": "2024-08-14T09:00:35Z"
        },
        "date_delivered": {
          "type": "string",
          "x-go-name": "DateDelivered",
          "example": "2024-07-14T09:00:35Z"
        },
        "delivery_deadline": {
          "type": "string",
          "x-go-name": "DeliveryDeadline",
          "example": "2024-08-14T09:00:35Z"
        },
        "duration": {
          "type": "number",
          "format": "float",
          "x-go-name": "Duration",
          "example": 12
        },
        "id": {
          "description": "TODO: follow new format for giving descriptions to fields for apis",
          "type": "string",
          "x-go-name": "ID",
          "example": "e384a1de-81f8-4cb2-b312-a7d88a9bf9cb"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Locations",
          "example": "\"us-east1\""
        },
        "price": {
          "type": "string",
          "x-go-name": "Price",
          "example": "6.25"
        },
        "product_line": {
          "type": "string",
          "x-go-name": "ProductLine",
          "example": "h100"
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Projects",
          "example": "\"1a8ebda8-3c68-4ba6-adf6-961c3ec53748\""
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Quantity",
          "example": 64
        },
        "reservation_type": {
          "type": "string",
          "x-go-name": "ReservationType",
          "example": "RIPA"
        },
        "used_quantity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UsedQuantity",
          "example": 32
        },
        "vm_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VMIDs",
          "example": "1a8ebda8-3c68-4ba6-adf6-961c3ec53748,6f70a988-fac6-4a9c-ae26-cb016d7bec72"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ReservationSpecification": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Reservation ID to use for the VM. Incompatible with\nSelectionStrategy specification.",
          "type": "string",
          "x-go-name": "ID",
          "example": "804bf3a2-81f2-4d78-9a9e-dc6a55ed33d8"
        },
        "selection_strategy": {
          "description": "Strategy for automatically selecting a reservation. Defaults to lowest cost selection.\nOn-demand may be specified opt out of reservation usages. Incompatible with ID specification.",
          "type": "string",
          "default": "lowest_cost",
          "enum": [
            "lowest_cost",
            "on_demand"
          ],
          "x-go-name": "SelectionStrategy",
          "example": "lowest_cost"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "ReservationsGetResponse": {
      "type": "object",
      "title": "ReservationsGetResponse is the response type for GET requests to the reservations endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reservation"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "SSHKey": {
      "type": "object",
      "required": [
        "id",
        "name",
        "public_key",
        "created_at",
        "fingerprints"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2022-01-24T20:13:35.328Z"
        },
        "fingerprints": {
          "$ref": "#/definitions/Fingerprints"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "0b880f48-6a97-408f-8351-3cc30871e010"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "public key 1"
        },
        "public_key": {
          "type": "string",
          "x-go-name": "PublicKey",
          "example": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICpuH/fqCFLbAConChyVH6rZzSaxlnHSwQk6qvtPsf5E"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "TokenInfo": {
      "description": "These are the fields returned from a GET request.",
      "type": "object",
      "title": "TokenInfo contains the Traits Island stores for a Token inside of Kratos.",
      "required": [
        "alias",
        "access_key",
        "created_at",
        "expires_at",
        "last_used"
      ],
      "properties": {
        "access_key": {
          "type": "string",
          "x-go-name": "AccessKey",
          "example": "Hm11C1coQZm2+Aihn9ofYg"
        },
        "alias": {
          "type": "string",
          "x-go-name": "Alias",
          "example": "token1"
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt",
          "example": "2021-11-03T22:16:27Z"
        },
        "expires_at": {
          "type": "string",
          "x-go-name": "ExpiresAt",
          "example": "2021-12-03T19:58:34Z"
        },
        "last_used": {
          "type": "string",
          "x-go-name": "LastUsed",
          "example": "2021-11-03T22:22:55Z"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "TokensPostResponse": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "$ref": "#/definitions/GeneratedToken"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "Type": {
      "type": "object",
      "title": "Types an instance of a Crusoe cloud offering, used in the GET vms.types endpoint response.",
      "required": [
        "product_name",
        "description",
        "cpu_cores",
        "cpu_type",
        "memory_gb",
        "memory_type",
        "disk_gb",
        "disk_type",
        "num_gpu",
        "gpu_type"
      ],
      "properties": {
        "cpu_cores": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPUCores",
          "example": 4
        },
        "cpu_type": {
          "type": "string",
          "x-go-name": "CPUType",
          "example": "intel"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description",
          "example": "2x Nvidia A100"
        },
        "disk_gb": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiskGB",
          "example": 8
        },
        "disk_type": {
          "type": "string",
          "x-go-name": "DiskType",
          "example": "SSD"
        },
        "gpu_type": {
          "type": "string",
          "x-go-name": "GPUType",
          "example": "A100"
        },
        "memory_gb": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MemoryGB",
          "example": 16
        },
        "memory_type": {
          "type": "string",
          "x-go-name": "MemoryType",
          "example": "RAM"
        },
        "num_gpu": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumGPU",
          "example": 2
        },
        "product_name": {
          "type": "string",
          "x-go-name": "ProductName",
          "example": "a100.2x"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "UsageByProjectGetResponse": {
      "type": "object",
      "title": "UsageByProjectGetResponse is the response type for GET requests to the usage.usageByProject endpoint.",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectUsageResponse"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "UsageOptions": {
      "description": "UsageOptions contains the values which exist for the fields which we allow filtering\non for the usageByProjectGet endpoint.",
      "type": "object",
      "required": [
        "projects",
        "resource_types",
        "regions",
        "start_date",
        "end_date"
      ],
      "properties": {
        "end_date": {
          "type": "string",
          "x-go-name": "EndDate",
          "example": "\"2023-08-08\""
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Projects",
          "example": [
            "d8f58dfd-dd86-4ee4-8f01-643e6d0f15bb"
          ]
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Regions",
          "example": [
            "us-east1",
            "us-northcentral1"
          ]
        },
        "resource_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ResourceTypes",
          "example": [
            "persistent-ssd",
            "a40.1x"
          ]
        },
        "start_date": {
          "type": "string",
          "x-go-name": "StartDate",
          "example": "\"2022-07-01\""
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "UserResponse": {
      "description": "The Identity of a user is returned.",
      "type": "object",
      "title": "UserResponse is the return type from the GET and PUT handlers to User.",
      "required": [
        "identity"
      ],
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Credentials"
        },
        "identity": {
          "$ref": "#/definitions/Identity"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VMAttachmentType": {
      "type": "string",
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VMAttachmentV1Alpha5": {
      "type": "object",
      "required": [
        "vm_id",
        "attachment_type"
      ],
      "properties": {
        "attachment_type": {
          "$ref": "#/definitions/VMAttachmentType"
        },
        "mode": {
          "$ref": "#/definitions/DiskModeType"
        },
        "vm_id": {
          "type": "string",
          "x-go-name": "VMID",
          "example": "123e4567-e89b-12d3-a456-426614174000"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCFirewallRule": {
      "type": "object",
      "required": [
        "id",
        "name",
        "direction",
        "action",
        "vpc_network_id",
        "state",
        "sources",
        "source_ports",
        "destinations",
        "destination_ports",
        "protocols"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "allow",
            "deny"
          ],
          "x-go-name": "Action",
          "example": "allow"
        },
        "destination_ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DestinationPorts",
          "example": "[80, 443, 3000-8080]"
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FirewallRuleObject"
          },
          "x-go-name": "Destinations"
        },
        "direction": {
          "type": "string",
          "enum": [
            "ingress",
            "egress"
          ],
          "x-go-name": "Direction",
          "example": "ingress"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-firewall-rule"
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Protocols",
          "example": "[tcp, udp]"
        },
        "source_ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SourcePorts",
          "example": "[80, 443, 3000-8080]"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FirewallRuleObject"
          },
          "x-go-name": "Sources"
        },
        "state": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ],
          "x-go-name": "State",
          "example": "active"
        },
        "vpc_network_id": {
          "type": "string",
          "x-go-name": "VPCNetworkID",
          "example": "74927f69-f6f6-43f4-bc0d-7bb2e864250e"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCFirewallRulesPatchRequest": {
      "type": "object",
      "title": "VPCFirewallRulesPatchRequest is the request type for PATCH requests to the VPC networks endpoint.",
      "properties": {
        "destination_ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DestinationPorts",
          "example": "[80, 443, 3000-8080]"
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FirewallRuleObject"
          },
          "x-go-name": "Destinations"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-firewall-rule"
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Protocols",
          "example": "[tcp, udp]"
        },
        "source_ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SourcePorts",
          "example": "[80, 443, 3000-8080]"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FirewallRuleObject"
          },
          "x-go-name": "Sources"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCFirewallRulesPostRequestV1Alpha5": {
      "type": "object",
      "title": "VPCFirewallRulesPostRequest is the request type for POST requests to the VPC networks endpoint.",
      "required": [
        "name",
        "direction",
        "action",
        "sources",
        "destinations",
        "protocols",
        "vpc_network_id"
      ],
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "allow",
            "deny"
          ],
          "x-go-name": "Action",
          "example": "allow"
        },
        "destination_ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DestinationPorts",
          "example": "[80, 443, 3000-8080]"
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FirewallRuleObject"
          },
          "x-go-name": "Destinations"
        },
        "direction": {
          "type": "string",
          "enum": [
            "ingress",
            "egress"
          ],
          "x-go-name": "Direction",
          "example": "ingress"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-firewall-rule"
        },
        "protocols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Protocols",
          "example": "[tcp, udp]"
        },
        "source_ports": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "SourcePorts",
          "example": "[80, 443, 3000-8080]"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FirewallRuleObject"
          },
          "x-go-name": "Sources"
        },
        "vpc_network_id": {
          "type": "string",
          "x-go-name": "VPCNetworkID",
          "example": "09ae8411-0fbb-411c-898c-2b8f19622ae1"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCNetwork": {
      "type": "object",
      "required": [
        "id",
        "name",
        "subnets",
        "gateway",
        "cidr"
      ],
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "CIDR",
          "example": "121.0.0.0/20"
        },
        "gateway": {
          "type": "string",
          "x-go-name": "Gateway",
          "example": "11bf5b4c-e0e5-4017-bdb8-3861f3acedc1"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "default-ethernet"
        },
        "subnets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Subnets",
          "example": "[1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc]"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCNetworkPatchRequest": {
      "type": "object",
      "title": "VPCNetworkPatchRequest is the request type for PATCH requests to the VPC Networks endpoint.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-cool-vpc-network"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCNetworkPostRequest": {
      "type": "object",
      "title": "VPCNetworkPostRequest is the request type for POST requests to the VPC Networks endpoint.",
      "required": [
        "name",
        "cidr"
      ],
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "Cidr",
          "example": "172.27.0.0/16"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-cool-vpc-network"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCNetworkPostResponse": {
      "type": "object",
      "title": "VPCNetworkPostResponse is the response type for POST requests to the VPC Networks endpoint.",
      "required": [
        "network"
      ],
      "properties": {
        "network": {
          "$ref": "#/definitions/VPCNetwork"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCSubnet": {
      "type": "object",
      "required": [
        "id",
        "name",
        "vpc_network_id",
        "cidr",
        "location"
      ],
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "CIDR",
          "example": "121.0.0.0/24"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-northcentraleast1-a"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-subnet"
        },
        "vpc_network_id": {
          "type": "string",
          "x-go-name": "VPCNetworkID",
          "example": "1ce839b7-3fab-46f9-8e54-7a6bb4ac1ffc"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCSubnetPatchRequest": {
      "type": "object",
      "title": "VPCSubnetPatchRequest is the request type for PATCH requests to the VPC Subnets endpoint.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-cool-vpc-subnet"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCSubnetPostRequest": {
      "type": "object",
      "title": "VPCSubnetPostRequest is the request type for POST requests to the VPC Subnet endpoint.",
      "required": [
        "name",
        "cidr",
        "vpc_network_id",
        "location"
      ],
      "properties": {
        "cidr": {
          "type": "string",
          "x-go-name": "Cidr",
          "example": "172.27.0.0/16"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location",
          "example": "us-east"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "my-cool-vpc-subnet"
        },
        "vpc_network_id": {
          "type": "string",
          "x-go-name": "VPCNetworkID",
          "example": "36c0b0d9-8b68-4869-addb-227b06b64ee0"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VPCSubnetPostResponse": {
      "type": "object",
      "title": "VPCSubnetPostResponse is the response type for POST requests to the VPC Subnets endpoint.",
      "required": [
        "subnet"
      ],
      "properties": {
        "subnet": {
          "$ref": "#/definitions/VPCSubnet"
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    },
    "VirtualizationFeatures": {
      "type": "object",
      "properties": {
        "nested_virtualization": {
          "type": "boolean",
          "x-go-name": "NestedVirtualization",
          "example": true
        }
      },
      "x-go-package": "gitlab.com/crusoeenergy/island/rest-gateway/internal/handlers"
    }
  },
  "responses": {
    "WrappedErrorBody": {
      "description": "WrappedErrorBody is a baseline Error Response Object\nThe body of every error response type must have the same structure as handlers.ErrorBody",
      "schema": {
        "$ref": "#/definitions/ErrorBody"
      },
      "headers": {
        "Body": {}
      }
    },
    "asyncOperationResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/AsyncOperationResponse"
      }
    },
    "auditLogsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/AuditLogsGetResponse"
      }
    },
    "authError": {
      "description": "Error Authentication Failed",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "x-go-name": "Code",
            "example": "401"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "bad_credential"
          }
        }
      }
    },
    "badReqError": {
      "description": "Error Bad Request",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "x-go-name": "Code",
            "example": "400"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "bad_request"
          }
        }
      }
    },
    "billingIntentGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/BillingIntentGetResponse"
      }
    },
    "capacitiesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListCapacitiesResponseV1Alpha5"
      }
    },
    "createInstanceGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InstanceGroup"
      }
    },
    "createInstanceTemplateResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InstanceTemplate"
      }
    },
    "createSSHKeysResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CreateSSHKeyResponse"
      }
    },
    "credentialsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CredentialsResponse"
      }
    },
    "customImagePatchResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/CustomImagePatchResponse"
      }
    },
    "emptyResponse": {
      "description": "Empty Response"
    },
    "featureFlagsGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/FeatureFlagsGetResponse"
      }
    },
    "getDiskResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DiskV1Alpha5"
      }
    },
    "getIbNetworkResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/IBNetwork"
      }
    },
    "getIbPartitionResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/IBPartition"
      }
    },
    "getImageResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Image"
      }
    },
    "getInstanceGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InstanceGroup"
      }
    },
    "getInstanceResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InstanceV1Alpha5"
      }
    },
    "getInstanceTemplateResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InstanceTemplate"
      }
    },
    "getKubernetesClusterCredentialsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/KubernetesAuthenticationClientCertificateDetails"
      }
    },
    "getKubernetesClusterResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/KubernetesCluster"
      }
    },
    "getKubernetesNodePoolResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/KubernetesNodePool"
      }
    },
    "getLoadBalancerResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/LoadBalancer"
      }
    },
    "getOperationResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Operation"
      }
    },
    "getProjectResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Project"
      }
    },
    "getSSHKeysResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListSSHKeysResponseV1Alpha5"
      }
    },
    "getSnapshotResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DiskSnapshot"
      }
    },
    "getTrainingClusterResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/MTCCluster"
      }
    },
    "getTrainingNodePoolResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/MTCNodePool"
      }
    },
    "getVPCNetworkResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/VPCNetwork"
      }
    },
    "getVpcFirewallRuleResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/VPCFirewallRule"
      }
    },
    "getVpcSubnetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/VPCSubnet"
      }
    },
    "ibPartitionsPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/IBPartition"
      }
    },
    "inferenceAPIKeyGetResponse": {
      "description": "A successful response from this resource will contain json-encoded array of token details, excluding the api key.",
      "schema": {
        "$ref": "#/definitions/ListInferenceAPIKeysResponseV1Alpha5"
      }
    },
    "inferenceAPIKeyPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InferenceAPIKeyPostResponse"
      }
    },
    "listDiskSnapshotsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListDiskSnapshotsResponseV1Alpha5"
      }
    },
    "listDisksResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListDisksResponseV1Alpha5"
      }
    },
    "listIBPartitionsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListIBPartitionsResponseV1Alpha5"
      }
    },
    "listIbNetworksResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListIBNetworksResponseV1Alpha5"
      }
    },
    "listImagesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListImagesResponseV1Alpha5"
      }
    },
    "listInstanceGroupsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListInstanceGroupsResponse"
      }
    },
    "listInstanceTemplatesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListInstanceTemplatesResponseV1Alpha5"
      }
    },
    "listInstancesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListInstancesResponseV1Alpha5"
      }
    },
    "listKubernetesClustersResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListKubernetesClustersResponse"
      }
    },
    "listKubernetesNodePoolsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListKubernetesNodePoolsResponse"
      }
    },
    "listLoadBalancersResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListLoadBalancersResponseV1Alpha5"
      }
    },
    "listOperationsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListOperationsResponseV1Alpha5"
      }
    },
    "listProjectQuotasResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListProjectQuotasResponse"
      }
    },
    "listProjectsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListProjectsResponseV1Alpha5"
      }
    },
    "listTrainingClustersResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListTrainingClustersResponse"
      }
    },
    "listTrainingNodePoolsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListMTCNodePoolsResponse"
      }
    },
    "listVPCNetworksResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListVPCNetworksResponseV1Alpha5"
      }
    },
    "listVpcFirewallRulesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListVPCFirewallRulesResponseV1Alpha5"
      }
    },
    "listVpcSubnetsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListVPCSubnetsResponseV1Alpha5"
      }
    },
    "locationsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListLocationsResponseV1Alpha5"
      }
    },
    "mfaGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/GetOrgMFAResponse"
      }
    },
    "notFoundError": {
      "description": "Error Not Found",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "x-go-name": "Code",
            "example": "404"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "not_found"
          }
        }
      }
    },
    "organizationsGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListEntitiesResponseV1Alpha5"
      }
    },
    "organizationsPutPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/EntitiesPutPostResponse"
      }
    },
    "patchInstanceGroupResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/InstanceGroup"
      }
    },
    "permissionsError": {
      "description": "Error Permissions",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "x-go-name": "Code",
            "example": "403"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "unauthorized"
          }
        }
      }
    },
    "projectsPutPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ProjectsPutPostResponseV1Alpha5"
      }
    },
    "prospectPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ProspectPostResponse"
      }
    },
    "reservationsResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ReservationsGetResponse"
      }
    },
    "serverError": {
      "description": "Error Internal Server",
      "schema": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "x-go-name": "Code",
            "example": "500"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message",
            "example": "internal_error"
          }
        }
      }
    },
    "tokensGetResponse": {
      "description": "A successful response from this resource will contain json-encoded array of token details, excluding the secret key.",
      "schema": {
        "$ref": "#/definitions/ListTokensResponseV1Alpha5"
      }
    },
    "tokensPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/TokensPostResponse"
      }
    },
    "typesGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ListTypesResponseV1Alpha5"
      }
    },
    "usageExportGetResponse": {
      "description": "",
      "headers": {
        "metric": {
          "type": "string",
          "example": "instance-hours"
        },
        "project_id": {
          "type": "string",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "example": "261.271111"
        },
        "region": {
          "type": "string",
          "example": "us-east1"
        },
        "resource_id": {
          "type": "string",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        },
        "resource_type": {
          "type": "string",
          "example": "a40.1x"
        },
        "usage_date": {
          "type": "string",
          "example": "ab4a6b00-aa5f-408e-a9fb-ac6de5eb45ab"
        }
      }
    },
    "usageGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UsageByProjectGetResponse"
      }
    },
    "usageOptionsGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UsageOptions"
      }
    },
    "usersGetResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UserResponse"
      }
    },
    "usersPutResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/UserResponse"
      }
    },
    "vpcNetworkPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/VPCNetworkPostResponse"
      }
    },
    "vpcSubnetPostResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/VPCSubnetPostResponse"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Compute",
      "tags": [
        "VMs",
        "VM-Operations",
        "Images",
        "Instance-Templates",
        "Instance-Groups"
      ]
    },
    {
      "name": "Organizations",
      "tags": [
        "Projects",
        "Billing",
        "Entities",
        "Prospects",
        "Usage"
      ]
    },
    {
      "name": "Users",
      "tags": [
        "Identities",
        "SSH-Keys",
        "Tokens"
      ]
    },
    {
      "name": "Storage",
      "tags": [
        "Disks",
        "Disk-Operations",
        "Snapshots",
        "Snapshot-Operations"
      ]
    },
    {
      "name": "Networking",
      "tags": [
        "VPC-Firewall-Rules",
        "VPC-Firewall-Rule-Operations",
        "VPC-Networks",
        "VPC-Subnets",
        "Internet-Gateways",
        "Load-Balancers",
        "Load-Balancer-Operations"
      ]
    },
    {
      "name": "Locations",
      "tags": [
        "Locations"
      ]
    },
    {
      "name": "Capacities",
      "tags": [
        "Capacities"
      ]
    }
  ]
}